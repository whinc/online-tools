{"version":3,"sources":["pages/NotFoundPage.tsx","routes.ts","theme.ts","App.tsx","serviceWorker.js","index.tsx","layout/PageLayout.tsx"],"names":["NotFoundPage","PageLayout","Link","href","routes","path","exact","component","React","lazy","theme","createMuiTheme","palette","primary","blue","secondary","pink","typography","fontSize","codeFontFamily","PageLoading","style","textAlign","CircularProgress","App","ThemeProvider","StylesProvider","injectFirst","from","to","map","route","key","fallback","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","useStyles","makeStyles","root","margin","title","flexGrow","children","styles","htmlColor","className","target"],"mappings":"mQAaeA,EATM,WACnB,OACE,kBAACC,EAAA,EAAD,KACE,mCACA,kBAACC,EAAA,EAAD,CAAMC,KAAK,MAAX,8BCiBSC,EAhBe,CAC5B,CACEC,KAAM,QACNC,OAAO,EACPC,UAAWC,IAAMC,MAAK,kBAAM,kCAE9B,CACEJ,KAAM,UACNE,UAAWC,IAAMC,MAAK,kBAAM,wDAE9B,CACEJ,KAAM,IACNE,UAAWP,I,wBCXFU,EAAQC,YAAe,CAClCC,QAAS,CACPC,QAASC,IACTC,UAAWC,KAEbC,WAAY,CACVC,SAAU,IAEZC,eAAgB,uECJZC,EAAc,WAClB,OACE,kBAACnB,EAAA,EAAD,KACE,yBAAKoB,MAAO,CAAEC,UAAW,WACvB,kBAACC,EAAA,EAAD,SA4BOC,MAtBf,WACE,OACE,kBAACC,EAAA,EAAD,CAAef,MAAOA,GACtB,kBAACgB,EAAA,EAAD,CAAgBC,aAAW,GACzB,kBAAC,mBAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAUC,KAAK,IAAItB,OAAK,EAACuB,GAAG,UAC3BzB,EAAO0B,KAAI,SAAAC,GAAK,OACf,kBAAC,IAAD,CAAOC,IAAKD,EAAM1B,KAAMA,KAAM0B,EAAM1B,KAAMC,MAAOyB,EAAMzB,OACrD,kBAAC,WAAD,CAAU2B,SAAU,kBAAC,EAAD,OAClB,kBAACF,EAAMxB,UAAP,iBCvBE2B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZN,kCAEAC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB,gCErInB,sFAUMC,EAAYC,YAAW,CAC3BC,KAAM,CACJC,OAAQ,aAEVC,MAAO,CACLC,SAAU,KAmCCrD,IA3B+B,SAAC,GAAyB,IAAvBsD,EAAsB,EAAtBA,SAAUF,EAAY,EAAZA,MACnDG,EAASP,IACf,OACE,oCACE,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAY1C,UAAU,IAAIJ,KAAK,UAC7B,kBAAC,IAAD,CAAMsD,UAAU,WAElB,kBAAC,IAAD,CAAYC,UAAWF,EAAOH,OAAQA,GAAS,4BAC/C,kBAAC,IAAD,CACE9C,UAAU,IACVJ,KAAK,wCACLwD,OAAO,UAEP,kBAAC,IAAD,CAAQF,UAAU,aAIxB,kBAAC,IAAD,MACA,kBAAC,IAAD,CAAWC,UAAWF,EAAOL,MAC1BI,M","file":"static/js/main.a07df8e6.chunk.js","sourcesContent":["import React from 'react'\nimport PageLayout from 'layout/PageLayout'\nimport { Link } from '@material-ui/core'\n\nconst NotFoundPage = () => {\n  return (\n    <PageLayout>\n      <h1>404</h1>\n      <Link href='#/'>返回首页</Link>\n    </PageLayout>\n  )\n}\n\nexport default NotFoundPage","import React from 'react'\r\nimport NotFoundPage from 'pages/NotFoundPage'\r\n\r\ntype RouteConfig = {\r\n  path: string,\r\n  exact?: boolean,\r\n  component: React.ElementType\r\n}\r\n\r\nconst routes: RouteConfig[] = [\r\n  {\r\n    path: '/home',\r\n    exact: true,\r\n    component: React.lazy(() => import('pages/HomePage'))\r\n  },\r\n  {\r\n    path: '/regexp',\r\n    component: React.lazy(() => import('pages/RegExpPage'))\r\n  },\r\n  {\r\n    path: '*',\r\n    component: NotFoundPage\r\n  }\r\n]\r\n\r\nexport default routes","import { createMuiTheme } from \"@material-ui/core/styles\";\nimport {blue, pink} from '@material-ui/core/colors'\n\ndeclare module \"@material-ui/core/styles/createMuiTheme\" {\n  // allow configuration using `createMuiTheme`\n  interface ThemeOptions {\n    codeFontFamily: string;\n  }\n}\n\nexport const theme = createMuiTheme({\n  palette: {\n    primary: blue,\n    secondary: pink\n  },\n  typography: {\n    fontSize: 14\n  },\n  codeFontFamily: \"source-code-pro, Menlo, Monaco, Consolas, 'Courier New', monospace\"\n});\n","import React, { Suspense } from \"react\";\nimport {\n  HashRouter as Router,\n  Route,\n  Switch,\n  Redirect\n} from \"react-router-dom\";\nimport { SnackbarProvider } from \"notistack\";\nimport PageLayout from \"layout/PageLayout\";\nimport { CircularProgress} from \"@material-ui/core\";\nimport { StylesProvider, ThemeProvider } from \"@material-ui/core/styles\";\nimport routes from \"routes\";\nimport {theme} from 'theme'\n\nconst PageLoading = () => {\n  return (\n    <PageLayout>\n      <div style={{ textAlign: \"center\" }}>\n        <CircularProgress />\n      </div>\n    </PageLayout>\n  );\n};\n\nfunction App() {\n  return (\n    <ThemeProvider theme={theme}>\n    <StylesProvider injectFirst>\n      <SnackbarProvider>\n        <Router>\n          <Switch>\n            <Redirect from=\"/\" exact to=\"/home\" />\n            {routes.map(route => (\n              <Route key={route.path} path={route.path} exact={route.exact}>\n                <Suspense fallback={<PageLoading />}>\n                  <route.component />\n                </Suspense>\n              </Route>\n            ))}\n          </Switch>\n        </Router>\n      </SnackbarProvider>\n    </StylesProvider>\n  </ThemeProvider>);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport('typeface-roboto')\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React from \"react\";\nimport {\n  Container,\n  AppBar,\n  Toolbar,\n  Typography,\n  IconButton} from \"@material-ui/core\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport {GitHub, Home} from '@material-ui/icons'\n\nconst useStyles = makeStyles({\n  root: {\n    margin: \"40px auto\"\n  },\n  title: {\n    flexGrow: 1\n  }\n});\n\ntype PageLayoutProps = {\n  title?: string;\n};\n\nconst PageLayout: React.FC<PageLayoutProps> = ({ children, title }) => {\n  const styles = useStyles();\n  return (\n    <>\n      <AppBar>\n        <Toolbar>\n          <IconButton component='a' href='#/home'>\n            <Home htmlColor='white' />\n          </IconButton>\n          <Typography className={styles.title}>{title || \"在线工具\"}</Typography>\n          <IconButton\n            component=\"a\"\n            href=\"https://github.com/whinc/online-tools\"\n            target=\"_blank\"\n          >\n            <GitHub htmlColor=\"white\"/>\n          </IconButton>\n        </Toolbar>\n      </AppBar>\n      <Toolbar />\n      <Container className={styles.root}>\n        {children}\n      </Container>\n    </>\n  );\n};\n\nexport default PageLayout;\n"],"sourceRoot":""}