{"version":3,"sources":["pages/RegExpPage.tsx","components/VisualRegExp.tsx","hooks/useRegulex.ts","components/CodeBlock.tsx","hooks/useQuery.ts"],"names":["Language","TabIndex","useStyles","makeStyles","theme","regexpContainer","width","overflow","textAlign","error","color","VisualRegExp","regexp","boxProps","containerRef","useRef","styles","regulex","useAsync","a","async","Promise","resolve","reject","script","document","createElement","src","process","onload","window","require","onerror","Error","body","appendChild","value","useState","setError","useEffect","current","innerHTML","parse","visualize","paper","Raphael","source","flags","undefined","err","_err","RegexSyntaxError","msg","message","lastIndex","push","repeat","join","Box","Typography","className","component","ref","style","height","CodeBlock","code","language","defaultProps","githubTheme","tokens","getLineProps","getTokenProps","lineHeight","py","px","margin","map","line","i","key","token","input","fontFamily","codeFontFamily","tags","marginRight","spacing","marginBottom","expand","transform","transition","transitions","create","duration","shortest","expandOpen","NameValue","name","display","mt","whiteSpace","wordBreak","TabPanel","children","id","props","pt","RegExpTestPanel","onChange","isEmpty","matched","useMemo","RegExp","test","TextField","variant","label","multiline","fullWidth","e","target","ml","grey","green","red","RegExpMatchPanel","matches","exec","group","n","RegExpReplacePanel","newValue","onNewValueChange","jsRegExp","newSubText","replace","console","log","substring","index","length","flagItems","flag","useRegExp","useLocation","pathname","search","history","useHistory","searchParams","URLSearchParams","query","useCallback","toString","useQuery","setQuery","mostRegExps","RegExpPage","TEST","tabIndex","setTabIndex","setRegexp","text","setText","newText","setNewText","useTheme","useMediaQuery","breakpoints","down","expanded","setExpanded","enqueueSnackbar","useSnackbar","JavaScript","setLanguage","separator","pb","MATCH","REPLACE","PageLayout","title","Card","CardHeader","CardContent","Grid","container","item","xs","sm","Input","startAdornment","placeholder","newFlags","split","forEach","includes","CardActions","FormControlLabel","control","Checkbox","checked","_","onFlagChange","my","Tabs","textColor","indicatorColor","Tab","onChangeIndex","Select","MenuItem","Button","marginLeft","endIcon","ExpandMore","clsx","onClick","Collapse","in","onCopy","autoHideDuration","Tooltip","placement","IconButton","FileCopy","flexWrap","Chip"],"mappings":"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","file":"static/js/7.e4f15431.chunk.js","sourcesContent":["import React, {\n  useState,\n  useRef,\n  useMemo,\n  useEffect,\n  useCallback\n} from \"react\";\nimport PageLayout from \"layout/PageLayout\";\nimport {\n  Select,\n  Grid,\n  TextField,\n  Input,\n  Typography,\n  Box,\n  Tabs,\n  Tab,\n  useMediaQuery,\n  Checkbox,\n  FormControlLabel,\n  CardHeader,\n  CardContent,\n  CardActions,\n  Card,\n  Chip,\n  IconButton,\n  Tooltip,\n  Collapse,\n  Button,\n  MenuItem\n} from \"@material-ui/core\";\nimport { makeStyles, useTheme } from \"@material-ui/core/styles\";\nimport { green, red, grey } from \"@material-ui/core/colors\";\nimport { useRegulex, useQuery } from \"hooks\";\nimport { debugErr } from \"utils\";\nimport SwipeableViews from \"react-swipeable-views\";\nimport { useLocation as useWindowLocation } from \"react-use\";\nimport { useSnackbar } from \"notistack\";\nimport { FileCopy, ExpandMore } from \"@material-ui/icons\";\nimport CopyToClipboard from \"react-copy-to-clipboard\";\nimport clsx from \"clsx\";\nimport {VisualRegExp, RegExpType, CodeBlock} from 'components'\n\ndeclare module \"@material-ui/core/styles/createMuiTheme\" {\n  interface Theme {\n    codeFontFamily: string;\n  }\n}\n\n\nenum Language {\n  JavaScript = \"JavaScript\"\n}\n\nenum TabIndex {\n  TEST,\n  MATCH,\n  REPLACE\n}\n\nconst useStyles = makeStyles(theme => ({\n  input: {\n    height: \"100%\",\n    fontFamily: theme.codeFontFamily\n  },\n  code: {\n    fontFamily: theme.codeFontFamily\n  },\n  tags: {\n    \"& > *\": {\n      marginRight: theme.spacing(1),\n      marginBottom: theme.spacing(1)\n    }\n  },\n  expand: {\n    transform: \"rotate(0deg)\",\n    transition: theme.transitions.create(\"transform\", {\n      duration: theme.transitions.duration.shortest\n    })\n  },\n  expandOpen: {\n    transform: \"rotate(180deg)\"\n  }\n}));\n\ntype PanelProps = {\n  regexp: RegExpType;\n  value: string;\n  onChange: (newValue: string) => void;\n};\n\nconst NameValue: React.FC<{ name: string; value: React.ReactNode }> = ({\n  name,\n  value\n}) => {\n  const styles = useStyles();\n  return (\n    <Box display=\"flex\" className={styles.code} mt={1}>\n      <Box whiteSpace=\"nowrap\">{name}:&nbsp;</Box>\n      <Box style={{ wordBreak: \"break-all\" }}>{value}</Box>\n    </Box>\n  );\n};\n\nconst TabPanel: React.FC<{ id: number; value: number }> = ({\n  children,\n  id,\n  value,\n  ...props\n}) => {\n  return <Box {...props}>{id === value && <Box pt={3}>{children}</Box>}</Box>;\n};\n\nconst RegExpTestPanel: React.FC<PanelProps> = ({ regexp, value, onChange }) => {\n  const isEmpty = !value || !regexp.source;\n  const matched = useMemo(() => {\n    if (isEmpty) return false;\n\n    let jsRegExp;\n    try {\n      jsRegExp = new RegExp(regexp.source, regexp.flags);\n      return jsRegExp.test(value);\n    } catch (err) {\n      debugErr(err);\n      return false;\n    }\n  }, [regexp, value, isEmpty]);\n  return (\n    <>\n      <Box>\n        <TextField\n          variant=\"outlined\"\n          label=\"输入源文本\"\n          multiline\n          fullWidth\n          value={value}\n          onChange={e => onChange(e.target.value)}\n        />\n      </Box>\n      <Box mt={2} ml={1}>\n        {isEmpty ? (\n          <Box color={grey[500]}>--</Box>\n        ) : matched ? (\n          <Box color={green[500]}>匹配!</Box>\n        ) : (\n          <Box color={red[500]}>不匹配!</Box>\n        )}\n      </Box>\n    </>\n  );\n};\n\nconst RegExpMatchPanel: React.FC<PanelProps> = ({\n  regexp,\n  value,\n  onChange\n}) => {\n  const isEmpty = !value || !regexp.source;\n  const matches = useMemo(() => {\n    if (isEmpty) return null;\n\n    let jsRegExp;\n    try {\n      jsRegExp = new RegExp(regexp.source, regexp.flags);\n      return jsRegExp.exec(value);\n    } catch (err) {\n      debugErr(err);\n      return null;\n    }\n  }, [isEmpty, regexp, value]);\n  return (\n    <>\n      <Box>\n        <TextField\n          variant=\"outlined\"\n          label=\"输入源文本\"\n          multiline\n          fullWidth\n          value={value}\n          onChange={e => onChange(e.target.value)}\n        />\n      </Box>\n      <Box mt={2}>\n        {isEmpty && <Box color={grey[500]}>--</Box>}\n        {!isEmpty && matches === null && <Box color={red[500]}>不匹配!</Box>}\n        {!isEmpty && matches !== null && (\n          <Box>\n            <Box color={green[500]}>匹配!</Box>\n            <Box style={{ overflow: \"auto\" }}>\n              {matches.map((group, n) => (\n                <NameValue name={`分组 #${n}`} value={group} />\n              ))}\n            </Box>\n          </Box>\n        )}\n      </Box>\n    </>\n  );\n};\n\ntype RegExpReplacePanelProps = PanelProps & {\n  newValue: string;\n  onNewValueChange: (newValue: string) => void;\n};\nconst RegExpReplacePanel: React.FC<RegExpReplacePanelProps> = ({\n  regexp,\n  value,\n  onChange,\n  newValue,\n  onNewValueChange\n}) => {\n  const [newSubText, matches] = useMemo(() => {\n    let jsRegExp;\n    try {\n      jsRegExp = new RegExp(regexp.source, regexp.flags);\n    } catch (err) {\n      debugErr(err);\n      return [\"\", null];\n    }\n    const newSubText = value.replace(jsRegExp, newValue);\n    const matches = jsRegExp.exec(value);\n    console.log(\"matches:\", matches);\n    return [newSubText, matches];\n  }, [regexp.flags, regexp.source, newValue, value]);\n  return (\n    <>\n      <Box>\n        <TextField\n          variant=\"outlined\"\n          label=\"输入源文本\"\n          multiline\n          fullWidth\n          value={value}\n          onChange={e => onChange(e.target.value)}\n        />\n      </Box>\n      {matches !== null && (\n        <Box mt={2}>\n          <NameValue name=\"$$\" value=\"$\" />\n          <NameValue name=\"$&\" value={matches[0]} />\n          <NameValue\n            name=\"$`\"\n            value={matches.input.substring(0, matches.index)}\n          />\n          <NameValue\n            name=\"$'\"\n            value={matches.input.substring(matches.index + matches[0].length)}\n          />\n          {matches.map((group, n) =>\n            n >= 1 ? <NameValue name={\"$\" + n} value={group} /> : null\n          )}\n        </Box>\n      )}\n      <Box mt={2}>\n        <TextField\n          variant=\"outlined\"\n          label=\"输入替换文本\"\n          multiline\n          fullWidth\n          value={newValue}\n          onChange={e => onNewValueChange(e.target.value)}\n        />\n      </Box>\n      <Box mt={2}>\n        <Box>{newSubText}</Box>\n      </Box>\n    </>\n  );\n};\n\nconst flagItems = [\n  {\n    flag: \"g\",\n    label: \"全局匹配\"\n  },\n  {\n    flag: \"i\",\n    label: \"忽略大小写\"\n  },\n  {\n    flag: \"m\",\n    label: \"多行匹配\"\n  }\n] as const;\n\nconst useRegExp = () => {\n  const [query, setQuery] = useQuery();\n  const source = query.source || \"\";\n  const flags = query.flags || \"\";\n  const regexp: RegExpType = { source, flags };\n  const setRegExp = useCallback(\n    (regexp: RegExpType) => {\n      setQuery(regexp);\n    },\n    [setQuery]\n  );\n  return [regexp, setRegExp] as const;\n};\n\nconst RegExpPage: React.FC = () => {\n  const styles = useStyles();\n  const [tabIndex, setTabIndex] = useState(TabIndex.TEST);\n  const [regexp, setRegexp] = useRegExp();\n  const [text, setText] = useState(\"\");\n  const [newText, setNewText] = useState(\"\");\n  const theme = useTheme();\n  const matches = useMediaQuery(theme.breakpoints.down(\"sm\"));\n  const [expanded, setExpanded] = useState(false);\n  const { enqueueSnackbar } = useSnackbar();\n  const [language, setLanguage] = useState(Language.JavaScript);\n\n  // 单个标志位变化\n  const onFlagChange = (flag: \"g\" | \"i\" | \"m\", checked: boolean) => {\n    let newFlags = regexp.flags.replace(new RegExp(flag, \"g\"), \"\");\n    newFlags += checked ? flag : \"\";\n    setRegexp({ ...regexp, flags: newFlags });\n  };\n\n  // 一组标志位变化\n  const onFlagsChange: React.ChangeEventHandler<HTMLInputElement> = e => {\n    let newFlags = e.target.value;\n    // 去除无效标志位\n    newFlags = newFlags.replace(/[^gim]/, \"\");\n    // 去重\n    \"gim\".split(\"\").forEach(flag => {\n      if (newFlags.includes(flag)) {\n        newFlags = newFlags.replace(new RegExp(flag, \"g\"), \"\") + flag;\n      }\n    });\n    setRegexp({ ...regexp, flags: newFlags });\n  };\n\n  const separator = (\n    <Box pt=\"6px\" pb=\"7px\" color=\"primary.main\">\n      /\n    </Box>\n  );\n\n  const code = useMemo(() => {\n    let code = \"\";\n    if (!expanded) return code;\n    if (tabIndex === TabIndex.TEST) {\n      code = `const str = \"${text}\";\n/${regexp.source}/${regexp.flags}.test(str)`;\n    } else if (tabIndex === TabIndex.MATCH) {\n      code = `const str = \"${text}\";\n/${regexp.source}/${regexp.flags}.exec(str)`;\n    } else if (tabIndex === TabIndex.REPLACE) {\n      code = `const str = \"${text}\";\nstr.replace(/${regexp.source}/${regexp.flags}, \"${newText}\")`;\n    }\n    return code;\n  }, [expanded, newText, regexp, tabIndex, text]);\n  return (\n    <PageLayout title=\"正则表达式\">\n      {/* 输入正则 */}\n      <Card>\n        <CardHeader title=\"正则表达式\"></CardHeader>\n        <CardContent>\n          <Grid container>\n            <Grid item xs={9} sm={10}>\n              <Input\n                className={styles.code}\n                startAdornment={separator}\n                placeholder=\"pattern\"\n                fullWidth\n                value={regexp.source}\n                onChange={e => setRegexp({ ...regexp, source: e.target.value })}\n              />\n            </Grid>\n            <Grid item xs sm>\n              <Input\n                className={styles.code}\n                startAdornment={separator}\n                placeholder=\"flags\"\n                fullWidth\n                value={regexp.flags}\n                onChange={onFlagsChange}\n              />\n            </Grid>\n          </Grid>\n        </CardContent>\n        <CardActions>\n          <Grid container>\n            {flagItems.map(item => (\n              <Grid item key={item.flag}>\n                <FormControlLabel\n                  control={\n                    <Checkbox\n                      checked={regexp.flags.includes(item.flag)}\n                      onChange={(_, checked) =>\n                        onFlagChange(item.flag, checked)\n                      }\n                      color=\"primary\"\n                    />\n                  }\n                  label={item.label}\n                />\n              </Grid>\n            ))}\n          </Grid>\n        </CardActions>\n      </Card>\n      {/* 可视化 */}\n      <Box mt={2}>\n        <Card>\n          <CardHeader title=\"可视化\"></CardHeader>\n          <CardContent>\n            <VisualRegExp regexp={regexp} />\n          </CardContent>\n          {/* <CardActions>\n            <Tooltip title=\"分享\" arrow placement=\"top\">\n              <CopyToClipboard\n                text={href || \"\"}\n                onCopy={() =>\n                  enqueueSnackbar(\n                    <span>\n                      <a\n                        href={href}\n                        target=\"_blank\"\n                        rel=\"noopener noreferrer\"\n                        style={{ color: \"white\" }}\n                      >\n                        {href}\n                      </a>{\" \"}\n                      已复制，快去分享吧！\n                    </span>\n                  )\n                }\n              >\n                <IconButton>\n                  <Share />\n                </IconButton>\n              </CopyToClipboard>\n            </Tooltip>\n          </CardActions> */}\n        </Card>\n      </Box>\n\n      {/* 测试/匹配/替换 */}\n      <Box my={2}>\n        <Card>\n          <CardContent>\n            <Tabs\n              value={tabIndex}\n              onChange={(_, value) => setTabIndex(value as number)}\n              textColor=\"primary\"\n              indicatorColor=\"primary\"\n              variant={matches ? \"fullWidth\" : \"standard\"}\n            >\n              <Tab label=\"测试\"></Tab>\n              <Tab label=\"匹配\"></Tab>\n              <Tab label=\"替换\"></Tab>\n            </Tabs>\n            <SwipeableViews index={tabIndex} onChangeIndex={setTabIndex}>\n              <TabPanel id={TabIndex.TEST} value={tabIndex}>\n                <RegExpTestPanel\n                  regexp={regexp}\n                  value={text}\n                  onChange={setText}\n                />\n              </TabPanel>\n              <TabPanel id={TabIndex.MATCH} value={tabIndex}>\n                <RegExpMatchPanel\n                  regexp={regexp}\n                  value={text}\n                  onChange={setText}\n                />\n              </TabPanel>\n              <TabPanel id={TabIndex.REPLACE} value={tabIndex}>\n                <RegExpReplacePanel\n                  regexp={regexp}\n                  value={text}\n                  onChange={setText}\n                  newValue={newText}\n                  onNewValueChange={setNewText}\n                />\n              </TabPanel>\n            </SwipeableViews>\n          </CardContent>\n          <CardActions>\n            {expanded && (\n              <Box ml={1}>\n                <Select\n                  value={language}\n                  onChange={e => setLanguage(e.target.value as Language)}\n                >\n                  <MenuItem value={Language.JavaScript}>JavaScript</MenuItem>\n                </Select>\n              </Box>\n            )}\n            <Button\n              style={{ marginLeft: \"auto\" }}\n              endIcon={\n                <ExpandMore\n                  className={clsx(styles.expand, {\n                    [styles.expandOpen]: expanded\n                  })}\n                />\n              }\n              onClick={() => setExpanded(!expanded)}\n            >\n              生成代码\n            </Button>\n          </CardActions>\n          {/* 生成代码 */}\n          <Collapse in={expanded}>\n            <CardContent>\n              <CodeBlock code={code} language='javascript' />\n            </CardContent>\n            <CardActions>\n              <CopyToClipboard\n                text={code}\n                onCopy={() =>\n                  enqueueSnackbar(\"已复制!\", { autoHideDuration: 1500 })\n                }\n              >\n                <Tooltip title=\"复制\" placement=\"top\">\n                  <IconButton>\n                    <FileCopy />\n                  </IconButton>\n                </Tooltip>\n              </CopyToClipboard>\n            </CardActions>\n          </Collapse>\n        </Card>\n      </Box>\n      {/* 常用正则 */}\n      <Box mt={2}>\n        <Card>\n          <CardHeader title=\"常用正则表达式\"></CardHeader>\n          <CardContent>\n            <Box display=\"flex\" flexWrap=\"wrap\" className={styles.tags}>\n              {mostRegExps.map(({ label, source }) => (\n                <Chip\n                  key={label}\n                  variant=\"outlined\"\n                  label={label}\n                  onClick={() => setRegexp({ source, flags: \"\" })}\n                />\n              ))}\n            </Box>\n          </CardContent>\n        </Card>\n      </Box>\n    </PageLayout>\n  );\n};\n\nconst mostRegExps = [\n  {\n    label: \"身份证号\",\n    source: /^\\d{17}[0-9Xx]|\\d{15}$/.source\n  },\n  {\n    label: \"Email地址\",\n    source: /^\\w[-\\w.+]*@([A-Za-z0-9][-A-Za-z0-9]+\\.)+[A-Za-z]{2,14}$/.source\n  },\n  {\n    label: \"中文字符\",\n    source: /^[\\u4e00-\\u9fa5]+$/.source\n  },\n  {\n    label: \"双字节字符(含汉字)\",\n    // eslint-disable-next-line no-control-regex\n    source: /^[^\\x00-\\xff]+$/.source\n  },\n  {\n    label: \"时间(时:分:秒)\",\n    source: /^([01]?\\d|2[0-3]):[0-5]?\\d:[0-5]?\\d$/.source\n  },\n  {\n    label: \"日期(年:月:日)\",\n    source: /^(([0-9]{3}[1-9]|[0-9]{2}[1-9][0-9]{1}|[0-9]{1}[1-9][0-9]{2}|[1-9][0-9]{3})-(((0[13578]|1[02])-(0[1-9]|[12][0-9]|3[01]))|((0[469]|11)-(0[1-9]|[12][0-9]|30))|(02-(0[1-9]|[1][0-9]|2[0-8]))))|((([0-9]{2})(0[48]|[2468][048]|[13579][26])|((0[48]|[2468][048]|[3579][26])00))-02-29)$/\n      .source\n  },\n  {\n    label: \"IPv4地址\",\n    source: /^\\d{0,3}\\.\\d{0,3}\\.\\d{0,3}\\.\\d{0,3}$/.source\n  },\n  {\n    label: \"手机号\",\n    source: /^(13\\d|14[579]|15[^4\\D]|17[^49\\D]|18\\d)\\d{8}$/.source\n  }\n];\n\nexport default RegExpPage;\n","import React, { useRef, useState, useEffect } from 'react'\r\nimport { useRegulex } from 'hooks';\r\nimport { debugErr } from 'utils';\r\nimport { Typography, BoxProps, Box } from '@material-ui/core';\r\nimport {makeStyles} from '@material-ui/core/styles'\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  regexpContainer: {\r\n    width: \"100%\",\r\n    overflow: \"auto\",\r\n    textAlign: \"center\"\r\n  },\r\n  error: {\r\n    width: \"100%\",\r\n    color: \"red\",\r\n    overflow: \"auto\"\r\n  }\r\n}));\r\n\r\nexport type RegExpType = {\r\n  source: string;\r\n  flags: string;\r\n};\r\n\r\nexport type VisualRegExpProps = {\r\n  regexp: RegExpType\r\n} & BoxProps\r\n\r\nexport const VisualRegExp: React.FC<VisualRegExpProps> = ({ regexp, ...boxProps}) => {\r\n  const containerRef = useRef<HTMLDivElement>(null);\r\n  const styles = useStyles();\r\n  const { value: regulex } = useRegulex();\r\n  const [error, setError] = useState<Error>();\r\n  useEffect(() => {\r\n    if (!regulex || !containerRef.current) return;\r\n\r\n    // 清除生成的图片\r\n    containerRef.current.innerHTML = \"\";\r\n\r\n    const { parse, visualize, Raphael } = regulex;\r\n    var paper = Raphael(containerRef.current, 0, 0);\r\n    try {\r\n      // 重新生成图片\r\n      visualize(parse(regexp.source), regexp.flags, paper);\r\n      // 重置错误\r\n      setError(undefined);\r\n    } catch (err) {\r\n      let _err = err;\r\n      // 如果是语法错误，格式化错误\r\n      if (err instanceof parse.RegexSyntaxError) {\r\n        var msg = [\"Error:\" + err.message, \"\"];\r\n        if (typeof err.lastIndex === \"number\") {\r\n          msg.push(regexp.source);\r\n          msg.push(\"-\".repeat(err.lastIndex) + \"^\");\r\n        }\r\n        _err = new Error(msg.join(\"\\n\"));\r\n      }\r\n      setError(_err);\r\n      debugErr(_err);\r\n    }\r\n  }, [regexp, regulex]);\r\n  return (\r\n    <Box {...boxProps}>\r\n      {error && (\r\n        <Typography className={styles.error} component=\"pre\">\r\n          <code>{error.message}</code>\r\n        </Typography>\r\n      )}\r\n      <div\r\n        ref={containerRef}\r\n        className={styles.regexpContainer}\r\n        style={{ height: error ? 0 : \"auto\" }}\r\n      />\r\n    </Box>\r\n  );\r\n};","import { useAsync } from \"react-use\";\n\nexport default function useRegulex() {\n  return useAsync(async () => {\n    return new Promise<any>((resolve, reject) => {\n      const script = document.createElement(\"script\");\n      script.src = process.env.PUBLIC_URL + \"/regulex.js\";\n      script.onload = () => {\n        const regulex = window.require(\"regulex\");\n        resolve(regulex);\n      };\n      script.onerror = () => {\n        reject(new Error(\"load regulex error!\"));\n      };\n      document.body.appendChild(script);\n    });\n  });\n}\n","import React from \"react\";\nimport Highlight, { defaultProps } from \"prism-react-renderer\";\nimport githubTheme from \"prism-react-renderer/themes/github\";\nimport { Box } from \"@material-ui/core\";\n\nexport type Language =\n  | \"markup\"\n  | \"bash\"\n  | \"clike\"\n  | \"c\"\n  | \"cpp\"\n  | \"css\"\n  | \"javascript\"\n  | \"jsx\"\n  | \"coffeescript\"\n  | \"actionscript\"\n  | \"css-extr\"\n  | \"diff\"\n  | \"git\"\n  | \"go\"\n  | \"graphql\"\n  | \"handlebars\"\n  | \"json\"\n  | \"less\"\n  | \"makefile\"\n  | \"markdown\"\n  | \"objectivec\"\n  | \"ocaml\"\n  | \"python\"\n  | \"reason\"\n  | \"sass\"\n  | \"scss\"\n  | \"sql\"\n  | \"stylus\"\n  | \"tsx\"\n  | \"typescript\"\n  | \"wasm\"\n  | \"yaml\";\n\nexport type CodeBlockProps = {\n  code: string;\n  language: Language;\n};\n\nexport const CodeBlock: React.FC<CodeBlockProps> = ({ code, language }) => {\n  return (\n    <Highlight\n      {...defaultProps}\n      code={code}\n      language={language}\n      theme={githubTheme}\n    >\n      {({ className, style, tokens, getLineProps, getTokenProps }) => (\n        <Box\n          component=\"pre\"\n          lineHeight={1.5}\n          py={1}\n          px={1}\n          className={className}\n          style={{...style, margin: 0}}\n        >\n          <Box component=\"code\">\n            {tokens.map((line, i) => (\n              <div {...getLineProps({ line, key: i })}>\n                {line.map((token, key) => (\n                  <span {...getTokenProps({ token, key })} />\n                ))}\n              </div>\n            ))}\n          </Box>\n        </Box>\n      )}\n    </Highlight>\n  );\n};\n","import { useLocation, useHistory } from \"react-router-dom\";\nimport { useCallback } from \"react\";\n\n/**\n * 获取 URL 查询参数\n * 例如 regexp?source=abc&flags=g 返回查询参数 {source: \"abc\", flags: \"g\"}\n */\nexport const useQuery = () => {\n  const {pathname, search} = useLocation();\n  const history = useHistory();\n  const searchParams = new URLSearchParams(search);\n  const query: Record<string, string> = {}\n  for(let [key, value] of searchParams) {\n    query[key] = value\n  }\n  const setQuery = useCallback(\n    (query: Record<string, string>) => {\n      const search = new URLSearchParams(query).toString();\n      history.replace({ pathname, search });\n    },\n    [history, pathname]\n  );\n\n  return [query, setQuery] as const;\n};"],"sourceRoot":""}