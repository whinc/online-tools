{"version":3,"sources":["hooks/index.ts","pages/RegExpPage.tsx","hooks/useRegulex.ts"],"names":["useStyles","makeStyles","theme","regexpContainer","width","overflow","textAlign","padding","error","color","input","height","fontFamily","codeFontFamily","code","NameValue","name","value","styles","Box","display","className","mt","whiteSpace","style","wordBreak","RegExpVisualPanel","regexp","containerRef","useRef","useState","expanded","setExpanded","regulex","useAsync","a","async","Promise","resolve","reject","script","document","createElement","src","process","onload","window","require","onerror","Error","body","appendChild","setError","useEffect","current","innerHTML","parse","visualize","paper","Raphael","source","flags","undefined","err","_err","RegexSyntaxError","msg","message","lastIndex","push","repeat","join","ExpansionPanel","onChange","event","ExpansionPanelSummary","expandIcon","ExpandMore","Typography","ExpansionPanelDetails","flexDirection","component","ref","RegExpTestPanel","text","setText","isEmpty","matched","useMemo","RegExp","test","Grid","container","direction","item","TextField","variant","label","multiline","fullWidth","e","target","ml","grey","green","red","RegExpMatchPanel","matches","exec","map","group","n","RegExpReplacePanel","subText","setSubText","jsRegExp","newSubText","replace","console","log","substring","index","length","RegExpPage","setRegexp","separator","pt","pb","PageLayout","title","spacing","xs","sm","Input","startAdornment","placeholder"],"mappings":"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","file":"static/js/7.880c7387.chunk.js","sourcesContent":["import {useLocation} from 'react-router-dom'\n\nexport {default as useRegulex} from './useRegulex'\n\nexport const useQuery = () => {\n  const usp = new URLSearchParams(useLocation().search)\n  const query: Record<string, string> = {}\n  for (let [key, value] of usp) {\n    query[key] = value\n  }\n  return query\n}","import React, { useState, useRef, useMemo, useEffect } from \"react\";\nimport PageLayout from \"layout/PageLayout\";\nimport {\n  Grid,\n  TextField,\n  Input,\n  Typography,\n  ExpansionPanel,\n  ExpansionPanelSummary,\n  ExpansionPanelDetails,\n  Box\n} from \"@material-ui/core\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { ExpandMore } from \"@material-ui/icons\";\nimport { green, red, grey } from \"@material-ui/core/colors\";\nimport { useRegulex } from \"hooks\";\nimport { debugErr } from \"utils\";\n\ndeclare module \"@material-ui/core/styles/createMuiTheme\" {\n  interface Theme {\n    codeFontFamily: string;\n  }\n}\n\nconst useStyles = makeStyles(theme => ({\n  regexpContainer: {\n    width: \"100%\",\n    overflow: \"auto\",\n    textAlign: \"center\",\n    padding: \"20px 0\"\n  },\n  error: {\n    width: \"100%\",\n    color: \"red\",\n    overflow: \"auto\"\n  },\n  input: {\n    height: \"100%\",\n    fontFamily: theme.codeFontFamily\n  },\n  code: {\n    fontFamily: theme.codeFontFamily\n  }\n}));\n\ntype RawRegExp = {\n  source: string;\n  flags: string;\n};\n\nconst NameValue: React.FC<{ name: string; value: React.ReactNode }> = ({\n  name,\n  value\n}) => {\n  const styles = useStyles();\n  return (\n    <Box display=\"flex\" className={styles.code} mt={1}>\n      <Box whiteSpace=\"nowrap\">{name}:&nbsp;</Box>\n      <Box style={{ wordBreak: \"break-all\" }}>{value}</Box>\n    </Box>\n  );\n};\n\nconst RegExpVisualPanel: React.FC<{ regexp: RawRegExp }> = ({ regexp }) => {\n  const containerRef = useRef<HTMLDivElement>(null);\n  const styles = useStyles();\n  const [expanded, setExpanded] = useState(true);\n  const { value: regulex } = useRegulex();\n  const [error, setError] = useState<Error>();\n  useEffect(() => {\n    if (!expanded || !regulex || !containerRef.current) return;\n\n    // 清除生成的图片\n    containerRef.current.innerHTML = \"\";\n\n    const { parse, visualize, Raphael } = regulex;\n    var paper = Raphael(containerRef.current, 0, 0);\n    try {\n      // 重新生成图片\n      visualize(parse(regexp.source), regexp.flags, paper);\n      // 重置错误\n      setError(undefined);\n    } catch (err) {\n      let _err = err;\n      // 如果是语法错误，格式化错误\n      if (err instanceof parse.RegexSyntaxError) {\n        var msg = [\"Error:\" + err.message, \"\"];\n        if (typeof err.lastIndex === \"number\") {\n          msg.push(regexp.source);\n          msg.push(\"-\".repeat(err.lastIndex) + \"^\");\n        }\n        _err = new Error(msg.join(\"\\n\"));\n      }\n      setError(_err);\n      debugErr(_err);\n    }\n  }, [regexp, regulex, expanded]);\n  return (\n    <ExpansionPanel\n      expanded={expanded}\n      onChange={(event, expanded) => setExpanded(expanded)}\n    >\n      <ExpansionPanelSummary expandIcon={<ExpandMore />}>\n        <Typography>可视化</Typography>\n      </ExpansionPanelSummary>\n      <ExpansionPanelDetails style={{ flexDirection: \"column\" }}>\n        {error && (\n          <Typography className={styles.error} component=\"pre\">\n            <code>{error.message}</code>\n          </Typography>\n        )}\n        <div\n          ref={containerRef}\n          className={styles.regexpContainer}\n          style={{ height: error ? 0 : \"auto\" }}\n        />\n      </ExpansionPanelDetails>\n    </ExpansionPanel>\n  );\n};\n\nconst RegExpTestPanel: React.FC<{ regexp: RawRegExp }> = ({ regexp }) => {\n  const [text, setText] = useState(\"\");\n  const isEmpty = !text || !regexp.source;\n  const [expanded, setExpanded] = useState(true);\n  const matched = useMemo(() => {\n    if (isEmpty) return false;\n\n    let jsRegExp;\n    try {\n      jsRegExp = new RegExp(regexp.source, regexp.flags);\n      return jsRegExp.test(text);\n    } catch (err) {\n      debugErr(err);\n      return false;\n    }\n  }, [regexp, text, isEmpty]);\n  return (\n    <ExpansionPanel\n      expanded={expanded}\n      onChange={(event, expanded) => setExpanded(expanded)}\n    >\n      <ExpansionPanelSummary expandIcon={<ExpandMore />}>\n        <Box>测试</Box>\n      </ExpansionPanelSummary>\n      <ExpansionPanelDetails>\n        <Grid container direction=\"column\">\n          <Grid item>\n            <TextField\n              variant=\"outlined\"\n              label=\"输入源文本\"\n              multiline\n              fullWidth\n              value={text}\n              onChange={e => setText(e.target.value)}\n            />\n          </Grid>\n          <Grid item>\n            <Box mt={2} ml={1}>\n              {isEmpty ? (\n                <Box color={grey[500]}>--</Box>\n              ) : matched ? (\n                <Box color={green[500]}>匹配!</Box>\n              ) : (\n                <Box color={red[500]}>不匹配!</Box>\n              )}\n            </Box>\n          </Grid>\n        </Grid>\n      </ExpansionPanelDetails>\n    </ExpansionPanel>\n  );\n};\n\nconst RegExpMatchPanel: React.FC<{ regexp: RawRegExp }> = ({ regexp }) => {\n  const [expanded, setExpanded] = useState(false);\n  const [text, setText] = useState(\"\");\n  const isEmpty = !text || !regexp.source;\n  const matches = useMemo(() => {\n    if (isEmpty) return null;\n\n    let jsRegExp;\n    try {\n      jsRegExp = new RegExp(regexp.source, regexp.flags);\n      return jsRegExp.exec(text);\n    } catch (err) {\n      debugErr(err);\n      return null;\n    }\n  }, [isEmpty, regexp, text]);\n  return (\n    <ExpansionPanel\n      expanded={expanded}\n      onChange={(event, expanded) => setExpanded(expanded)}\n    >\n      <ExpansionPanelSummary expandIcon={<ExpandMore />}>\n        <Typography>匹配</Typography>\n      </ExpansionPanelSummary>\n      <ExpansionPanelDetails style={{ flexDirection: \"column\" }}>\n        <Box>\n          <TextField\n            variant=\"outlined\"\n            label=\"输入源文本\"\n            multiline\n            fullWidth\n            value={text}\n            onChange={e => setText(e.target.value)}\n          />\n        </Box>\n        <Box mt={2}>\n          {isEmpty && <Box color={grey[500]}>--</Box>}\n          {!isEmpty && matches === null && <Box color={red[500]}>不匹配!</Box>}\n          {!isEmpty && matches !== null && (\n            <Box>\n              <Box color={green[500]}>匹配!</Box>\n              <Box style={{ overflow: \"auto\" }}>\n                {matches.map((group, n) => (\n                  <NameValue name={`分组 #${n}`} value={group} />\n                ))}\n              </Box>\n              {/* <Box mt={2}>JavaScript 代码：</Box>\n              <Box style={{ overflow: \"auto\" }}>\n                <Box component=\"pre\" className={styles.code}>\n                  {`/${regexp.source}/${regexp.flags}.exec(\"${\n                    matches.input.length <= 6\n                      ? matches.input\n                      : matches.input.substr(0, 3) +\n                        \"...\" +\n                        matches.input.substr(matches.input.length - 3)\n                  }\")`}\n                </Box>\n                <Box component=\"pre\" className={styles.code}>\n                  {JSON.stringify(matches, null, 2)}\n                </Box>\n              </Box> */}\n            </Box>\n          )}\n        </Box>\n      </ExpansionPanelDetails>\n    </ExpansionPanel>\n  );\n};\n\nconst RegExpReplacePanel: React.FC<{ regexp: RawRegExp }> = ({ regexp }) => {\n  const [expanded, setExpanded] = useState(false);\n  const [text, setText] = useState(\"\");\n  const [subText, setSubText] = useState(\"\");\n  const [newSubText, matches] = useMemo(() => {\n    // if (isEmpty) return null;\n\n    let jsRegExp;\n    try {\n      jsRegExp = new RegExp(regexp.source, regexp.flags);\n    } catch (err) {\n      debugErr(err);\n      return [\"\", null];\n    }\n    const newSubText = text.replace(jsRegExp, subText);\n    const matches = jsRegExp.exec(text);\n    console.log(\"matches:\", matches);\n    return [newSubText, matches];\n  }, [regexp.flags, regexp.source, subText, text]);\n  return (\n    <ExpansionPanel\n      expanded={expanded}\n      onChange={(event, expanded) => setExpanded(expanded)}\n    >\n      <ExpansionPanelSummary expandIcon={<ExpandMore />}>\n        <Typography>替换</Typography>\n      </ExpansionPanelSummary>\n      <ExpansionPanelDetails style={{ flexDirection: \"column\" }}>\n        <Box>\n          <TextField\n            variant=\"outlined\"\n            label=\"输入源文本\"\n            multiline\n            fullWidth\n            value={text}\n            onChange={e => setText(e.target.value)}\n          />\n        </Box>\n        {matches !== null && (\n          <Box mt={2}>\n            <NameValue name=\"$$\" value=\"$\" />\n            <NameValue name=\"$&\" value={matches[0]} />\n            <NameValue\n              name=\"$`\"\n              value={matches.input.substring(0, matches.index)}\n            />\n            <NameValue\n              name=\"$'\"\n              value={matches.input.substring(matches.index + matches[0].length)}\n            />\n            {matches.map((group, n) =>\n              n >= 1 ? <NameValue name={\"$\" + n} value={group} /> : null\n            )}\n          </Box>\n        )}\n        <Box mt={2}>\n          <TextField\n            variant=\"outlined\"\n            label=\"输入替换文本\"\n            multiline\n            fullWidth\n            value={subText}\n            onChange={e => setSubText(e.target.value)}\n          />\n        </Box>\n        <Box mt={2}>\n          <Box>{newSubText}</Box>\n        </Box>\n      </ExpansionPanelDetails>\n    </ExpansionPanel>\n  );\n};\n\nconst RegExpPage: React.FC = () => {\n  const styles = useStyles();\n  const [regexp, setRegexp] = useState({ source: \"a(\\\\w+)c\", flags: \"\" });\n\n  const separator = (\n    <Box pt=\"6px\" pb=\"7px\" color=\"primary.main\">\n      /\n    </Box>\n  );\n  return (\n    <PageLayout title=\"正则表达式\">\n      <Grid container direction=\"column\" spacing={4}>\n        <Grid item>\n          <Grid container>\n            <Grid item xs={9} sm={10}>\n              <Input\n                className={styles.code}\n                startAdornment={separator}\n                placeholder=\"source\"\n                fullWidth\n                value={regexp.source}\n                onChange={e => setRegexp({ ...regexp, source: e.target.value })}\n              />\n            </Grid>\n            <Grid item xs sm>\n              <Input\n                className={styles.code}\n                startAdornment={separator}\n                placeholder=\"flags\"\n                fullWidth\n                value={regexp.flags}\n                onChange={e => setRegexp({ ...regexp, flags: e.target.value })}\n              />\n            </Grid>\n          </Grid>\n        </Grid>\n      </Grid>\n      <Box height={16} />\n      <RegExpVisualPanel regexp={regexp} />\n      <RegExpTestPanel regexp={regexp} />\n      <RegExpMatchPanel regexp={regexp} />\n      <RegExpReplacePanel regexp={regexp} />\n    </PageLayout>\n  );\n};\n\nexport default RegExpPage;\n","import { useAsync } from \"react-use\";\n\nexport default function useRegulex() {\n  return useAsync(async () => {\n    return new Promise<any>((resolve, reject) => {\n      const script = document.createElement(\"script\");\n      script.src = process.env.PUBLIC_URL + \"/regulex.js\";\n      script.onload = () => {\n        const regulex = window.require(\"regulex\");\n        resolve(regulex);\n      };\n      script.onerror = () => {\n        reject(new Error(\"load regulex error!\"));\n      };\n      document.body.appendChild(script);\n    });\n  });\n}\n"],"sourceRoot":""}