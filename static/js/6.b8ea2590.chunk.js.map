{"version":3,"sources":["pages/RegExpPage.tsx"],"names":["RegExpPage","props","useState","pattern","flags","source","setSource","inputText","setInputText","result","setResult","enqueueSnackbar","useSnackbar","onClickTest","useCallback","matches","RegExp","test","String","variant","anchorOrigin","vertical","horizontal","autoHideDuration","container","direction","spacing","item","xs","sm","style","height","startAdornment","padding","placeholder","fullWidth","value","onChange","e","target","color","onClick","label","multiline"],"mappings":"6NA6EeA,UAtEI,SAACC,GAA4B,IAAD,EACjBC,mBAAS,CAACC,QAAS,GAAIC,MAAO,KADb,mBACtCC,EADsC,KAC9BC,EAD8B,OAEXJ,mBAAS,IAFE,mBAEtCK,EAFsC,KAE3BC,EAF2B,OAGjBN,mBAAS,IAHQ,mBAGtCO,EAHsC,KAG9BC,EAH8B,KAItCC,EAAmBC,wBAAnBD,gBAEDE,EAAcC,uBAAY,WAC9B,GAAKT,EAAOF,QAAZ,CAQA,IACMY,EADS,IAAIC,OAAOX,EAAOF,QAASE,EAAOD,OAC1Ba,KAAKV,GAC5BG,EAAUQ,OAAOH,SATfJ,EAAgB,mDAAY,CAC1BQ,QAAS,UACTC,aAAc,CAAEC,SAAU,MAAOC,WAAY,UAC7CC,iBAAkB,SAOrB,CAAClB,EAAOF,QAASE,EAAOD,MAAOG,EAAWI,IAE7C,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAMa,WAAS,EAACC,UAAU,SAASC,QAAS,GAC1C,kBAAC,IAAD,CAAMC,MAAI,GACR,kBAAC,IAAD,CAAMH,WAAS,GACb,kBAAC,IAAD,CAAMG,MAAI,EAACC,GAAI,EAAGC,GAAI,IACpB,kBAAC,IAAD,CACEC,MAAO,CAAEC,OAAQ,QACjBC,eAAgB,yBAAKF,MAAO,CAACG,QAAS,WAAtB,KAChBC,YAAY,iCACZC,WAAS,EACTC,MAAO/B,EAAOF,QACdkC,SAAU,SAAAC,GAAC,OAAIhC,EAAU,eAAID,EAAL,CAAaF,QAASmC,EAAEC,OAAOH,aAG3D,kBAAC,IAAD,CAAMT,MAAI,EAACC,GAAI,EAAGC,IAAE,GAClB,kBAAC,IAAD,CACEG,eAAgB,yBAAKF,MAAO,CAAEG,QAAS,WAAvB,KAChBC,YAAY,qBACZC,WAAS,EACTL,MAAO,CAAEC,OAAQ,QACjBK,MAAO/B,EAAOD,MACdiC,SAAU,SAAAC,GAAC,OAAIhC,EAAU,eAAID,EAAL,CAAaD,MAAOkC,EAAEC,OAAOH,eAK7D,kBAAC,IAAD,CAAMT,MAAI,GACJ,kBAAC,IAAD,CAAQa,MAAM,UAAUrB,QAAQ,YAAYsB,QAAS5B,EAAasB,WAAS,GAA3E,iBAIN,kBAAC,IAAD,CAAMR,MAAI,GACR,kBAAC,IAAD,CACER,QAAQ,WACRuB,MAAM,uCACNC,WAAS,EACTR,WAAS,EACTC,MAAO7B,EACP8B,SAAU,SAAAC,GAAC,OAAI9B,EAAa8B,EAAEC,OAAOH,WAGzC,kBAAC,IAAD,CAAMT,MAAI,GAChB,kBAAC,IAAD,KAAalB","file":"static/js/6.b8ea2590.chunk.js","sourcesContent":["import React, {useCallback, useState} from \"react\";\nimport PageLayout from \"layout/PageLayout\";\nimport { Grid, TextField, Input , Button, Typography} from \"@material-ui/core\";\nimport {useSnackbar} from 'notistack'\n\ntype RegExpPageProps = {};\n\nconst RegExpPage = (props: RegExpPageProps) => {\n  const [source, setSource] = useState({pattern: '', flags: ''})\n  const [inputText, setInputText] = useState('')\n  const [result, setResult] = useState('')\n  const {enqueueSnackbar} = useSnackbar()\n\n  const onClickTest = useCallback(() => {\n    if (!source.pattern) {\n      enqueueSnackbar(\"请输入正则表达式\", {\n        variant: \"warning\",\n        anchorOrigin: { vertical: \"top\", horizontal: \"center\" },\n        autoHideDuration: 1500\n      });\n      return\n    }\n    const regexp = new RegExp(source.pattern, source.flags)\n    const matches = regexp.test(inputText)\n    setResult(String(matches))\n  }, [source.pattern, source.flags, inputText, enqueueSnackbar])\n\n  return (\n    <PageLayout>\n      <Grid container direction=\"column\" spacing={4}>\n        <Grid item>\n          <Grid container>\n            <Grid item xs={9} sm={10}>\n              <Input\n                style={{ height: \"100%\" }}\n                startAdornment={<div style={{padding: \"0 10px\"}}>/</div>}\n                placeholder=\"正则表达式\"\n                fullWidth\n                value={source.pattern}\n                onChange={e => setSource({...source, pattern: e.target.value})}\n              />\n            </Grid>\n            <Grid item xs={2} sm>\n              <Input\n                startAdornment={<div style={{ padding: \"0 10px\" }}>/</div>}\n                placeholder=\"标志位\"\n                fullWidth\n                style={{ height: \"100%\" }}\n                value={source.flags}\n                onChange={e => setSource({...source, flags: e.target.value})}\n              />\n            </Grid>\n          </Grid>\n        </Grid>\n        <Grid item>\n              <Button color=\"primary\" variant=\"contained\" onClick={onClickTest} fullWidth>\n                测试\n              </Button>\n        </Grid>\n        <Grid item>\n          <TextField\n            variant=\"outlined\"\n            label=\"输入测试文本\"\n            multiline\n            fullWidth\n            value={inputText}\n            onChange={e => setInputText(e.target.value)}\n          />\n        </Grid>\n        <Grid item>\n  <Typography>{result}</Typography>\n        </Grid>\n      </Grid>\n    </PageLayout>\n  );\n};\n\nexport default RegExpPage;\n"],"sourceRoot":""}