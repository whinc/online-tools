{"version":3,"sources":["layout/PageLayout.tsx","pages/LoadingPage.tsx","pages/NotFoundPage.tsx","App.tsx","serviceWorker.js","index.tsx"],"names":["useStyles","makeStyles","root","margin","PageLayout","children","styles","className","maxWidth","LoadingPage","style","textAlign","CircularProgress","NotFoundPage","Link","href","routeConfigs","path","exact","component","React","lazy","App","map","config","key","fallback","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"mHAAA,oCAIMA,EAAYC,YAAW,CAC3BC,KAAM,CACJC,OAAQ,eAaGC,IATc,SAAC,GAAgB,IAAfC,EAAc,EAAdA,SACvBC,EAASN,IACf,OACE,kBAAC,IAAD,CAAWO,UAAWD,EAAOJ,KAAMM,SAAS,MACzCH,K,sLCCQI,EAXK,WAClB,OACE,kBAACL,EAAA,EAAD,KACE,yBAAKM,MAAO,CAACC,UAAW,WAExB,kBAACC,EAAA,EAAD,S,SCISC,EATM,WACnB,OACE,kBAACT,EAAA,EAAD,KACE,mCACA,kBAACU,EAAA,EAAD,CAAMC,KAAK,KAAX,8BCQAC,EAA8B,CAClC,CACEC,KAAM,IACNC,OAAO,EACPC,UAAWC,IAAMC,MAAK,kBAAM,wDAE9B,CACEJ,KAAM,UACNE,UAAWC,IAAMC,MAAK,kBAAM,wDAE9B,CACEJ,KAAM,IACNE,UAAWN,IAsBAS,MAlBf,WACE,OACE,kBAAC,mBAAD,KACA,kBAAC,IAAD,KACE,kBAAC,IAAD,KACGN,EAAaO,KAAI,SAAAC,GAAM,OACtB,kBAAC,IAAD,CAAOC,IAAKD,EAAOP,KAAMA,KAAMO,EAAOP,KAAMC,MAAOM,EAAON,OACxD,kBAAC,WAAD,CAAUQ,SAAU,kBAAC,EAAD,OAClB,kBAACF,EAAOL,UAAR,eC5BMQ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.f49f8c2f.chunk.js","sourcesContent":["import React from 'react'\nimport {Container} from '@material-ui/core'\nimport {makeStyles, createStyles} from '@material-ui/core/styles'\n\nconst useStyles = makeStyles({\n  root: {\n    margin: '40px auto'\n  }\n})\n\nconst PageLayout: React.FC = ({children}) => {\n  const styles = useStyles()\n  return (\n    <Container className={styles.root} maxWidth='md'>\n      {children}\n    </Container>\n  )\n}\n\nexport default PageLayout","import React from 'react'\nimport PageLayout from 'layout/PageLayout'\nimport { CircularProgress } from '@material-ui/core'\n\nconst LoadingPage = () => {\n  return (\n    <PageLayout>\n      <div style={{textAlign: 'center'}}>\n\n      <CircularProgress />\n      </div>\n    </PageLayout>\n  )\n}\n\nexport default LoadingPage","import React from 'react'\nimport PageLayout from 'layout/PageLayout'\nimport { Link } from '@material-ui/core'\n\nconst NotFoundPage = () => {\n  return (\n    <PageLayout>\n      <h1>404</h1>\n      <Link href='/'>返回首页</Link>\n    </PageLayout>\n  )\n}\n\nexport default NotFoundPage","import React, {Suspense} from \"react\";\nimport {\n  BrowserRouter as Router,\n  Route,\n  Switch,\n} from \"react-router-dom\";\nimport {SnackbarProvider} from 'notistack'\nimport LoadingPage from 'pages/LoadingPage'\nimport NotFoundPage from 'pages/NotFoundPage'\n\ntype RouteConfig = {\n  path: string,\n  exact?: boolean,\n  component: React.ElementType\n}\n\nconst routeConfigs: RouteConfig[] = [\n  {\n    path: '/',\n    exact: true,\n    component: React.lazy(() => import('pages/IndexPage'))\n  },\n  {\n    path: '/regexp',\n    component: React.lazy(() => import('pages/RegExpPage'))\n  },\n  {\n    path: '*',\n    component: NotFoundPage\n  }\n]\n\nfunction App() {\n  return (\n    <SnackbarProvider>\n    <Router>\n      <Switch>\n        {routeConfigs.map(config => (\n          <Route key={config.path} path={config.path} exact={config.exact}>\n            <Suspense fallback={<LoadingPage />}>\n              <config.component />\n            </Suspense>\n          </Route>\n        ))}\n      </Switch>\n    </Router>\n    </SnackbarProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}