{"version":3,"sources":["hooks/useQuery.ts","components/VisualRegExp.tsx","hooks/useRegulex.ts","components/CodeBlock.tsx","components/CopyAction.tsx","components/OutLink.tsx","pages/RegExpPage/RegExpChips.tsx","pages/RegExpPage/RegExpTestPanel.tsx","pages/RegExpPage/RegExpMatchPanel.tsx","pages/RegExpPage/RegExpReplacePanel.tsx","pages/RegExpPage/index.tsx"],"names":["useQuery","useLocation","pathname","search","history","useHistory","searchParams","URLSearchParams","query","key","value","useCallback","toString","replace","useStyles","makeStyles","theme","regexpContainer","width","overflow","textAlign","error","color","VisualRegExp","regexp","boxProps","containerRef","useRef","styles","regulex","useAsync","a","Promise","resolve","reject","script","document","createElement","src","process","onload","window","require","onerror","Error","body","appendChild","useState","setError","useEffect","current","innerHTML","parse","visualize","paper","Raphael","source","flags","undefined","err","_err","RegexSyntaxError","msg","message","lastIndex","push","repeat","join","Box","Typography","className","component","ref","style","height","CodeBlock","code","language","defaultProps","githubTheme","tokens","getLineProps","getTokenProps","lineHeight","py","px","margin","map","line","i","token","CopyAction","text","enqueueSnackbar","useSnackbar","display","root","onCopy","autoHideDuration","Tooltip","title","placement","IconButton","FileCopyOutlined","OutLink","href","target","OpenInNew","RegExpChips","onSelect","flexWrap","tags","REG_EXP_ARR","label","Chip","variant","onClick","marginRight","spacing","marginBottom","RegExpTestPanel","setText","useMemo","result1","result2","error1","error2","RegExp","test","escapedText","code1","code2","console","log","flexDirection","TextField","multiline","fullWidth","onChange","e","mt","alignItems","bgcolor","flexGrow","String","supportMatchAll","prototype","RegExpMatchPanel","result3","error3","exec","match","matchAll","code3","stringifyRegExpExecArray","stringifyRegExpMatchArray","stringifyRegExpMatchAllResult","result","JSON","stringify","str","forEach","index","input","groups","length","item","next","done","Language","TabIndex","RegExpReplacePanel","replacer","setReplacer","escapedReplacer","regexpInput","fontSize","fontFamily","codeFontFamily","expand","transform","transition","transitions","create","duration","shortest","expandOpen","TabPanel","children","id","props","pt","flagItems","flag","RegExpPage","defaultValue","TEST","setQuery","tabIndex","parseInt","tab","setTabIndex","useTabIndex","useRegExp","setRegexp","newText","useTheme","matches","useMediaQuery","breakpoints","down","expanded","setExpanded","JavaScript","setLanguage","separator","pb","MATCH","REPLACE","PageLayout","xs","md","flexBasis","Input","startAdornment","placeholder","newFlags","split","includes","FormControlLabel","control","Checkbox","checked","_","onFlagChange","justifyContent","mr","Tabs","textColor","indicatorColor","Tab","COMMONLY_USED_REGEXP","my","Card","CardContent","CardActions","ml","Select","MenuItem","Button","marginLeft","endIcon","ExpandMore","clsx","Collapse","in"],"mappings":"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","file":"static/js/6.e147399b.chunk.js","sourcesContent":["import { useLocation, useHistory } from \"react-router-dom\";\nimport { useCallback } from \"react\";\n\n/**\n * 获取 URL 查询参数\n * 例如 regexp?source=abc&flags=g 返回查询参数 {source: \"abc\", flags: \"g\"}\n */\nexport const useQuery = () => {\n  const {pathname, search} = useLocation();\n  const history = useHistory();\n  const searchParams = new URLSearchParams(search);\n  const query: Record<string, string> = {}\n  for(let [key, value] of searchParams) {\n    query[key] = value\n  }\n  const setQuery = useCallback(\n    (query: Record<string, string>) => {\n      const search = new URLSearchParams(query).toString();\n      history.replace({ pathname, search });\n    },\n    [history, pathname]\n  );\n\n  return [query, setQuery] as const;\n};","import React, { useRef, useState, useEffect } from 'react'\r\nimport { useRegulex } from 'hooks';\r\nimport { debugErr } from 'utils';\r\nimport { Typography, BoxProps, Box } from '@material-ui/core';\r\nimport {makeStyles} from '@material-ui/core/styles'\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  regexpContainer: {\r\n    width: \"100%\",\r\n    overflow: \"auto\",\r\n    textAlign: \"center\"\r\n  },\r\n  error: {\r\n    width: \"100%\",\r\n    color: \"red\",\r\n    overflow: \"auto\"\r\n  }\r\n}));\r\n\r\nexport type RegExpType = {\r\n  source: string;\r\n  flags: string;\r\n};\r\n\r\nexport type VisualRegExpProps = {\r\n  regexp: RegExpType\r\n} & BoxProps\r\n\r\nexport const VisualRegExp: React.FC<VisualRegExpProps> = ({ regexp, ...boxProps}) => {\r\n  const containerRef = useRef<HTMLDivElement>(null);\r\n  const styles = useStyles();\r\n  const { value: regulex } = useRegulex();\r\n  const [error, setError] = useState<Error>();\r\n  useEffect(() => {\r\n    if (!regulex || !containerRef.current) return;\r\n\r\n    // 清除生成的图片\r\n    containerRef.current.innerHTML = \"\";\r\n\r\n    const { parse, visualize, Raphael } = regulex;\r\n    var paper = Raphael(containerRef.current, 0, 0);\r\n    try {\r\n      // 重新生成图片\r\n      visualize(parse(regexp.source), regexp.flags, paper);\r\n      // 重置错误\r\n      setError(undefined);\r\n    } catch (err) {\r\n      let _err = err;\r\n      // 如果是语法错误，格式化错误\r\n      if (err instanceof parse.RegexSyntaxError) {\r\n        var msg = [\"Error:\" + err.message, \"\"];\r\n        if (typeof err.lastIndex === \"number\") {\r\n          msg.push(regexp.source);\r\n          msg.push(\"-\".repeat(err.lastIndex) + \"^\");\r\n        }\r\n        _err = new Error(msg.join(\"\\n\"));\r\n      }\r\n      setError(_err);\r\n      debugErr(_err);\r\n    }\r\n  }, [regexp, regulex]);\r\n  return (\r\n    <Box {...boxProps}>\r\n      {error && (\r\n        <Typography className={styles.error} component=\"pre\">\r\n          <code>{error.message}</code>\r\n        </Typography>\r\n      )}\r\n      <div\r\n        ref={containerRef}\r\n        className={styles.regexpContainer}\r\n        style={{ height: error ? 0 : \"auto\" }}\r\n      />\r\n    </Box>\r\n  );\r\n};","import { useAsync } from \"react-use\";\n\nexport default function useRegulex() {\n  return useAsync(async () => {\n    return new Promise<any>((resolve, reject) => {\n      const script = document.createElement(\"script\");\n      script.src = process.env.PUBLIC_URL + \"/regulex.js\";\n      script.onload = () => {\n        const regulex = window.require(\"regulex\");\n        resolve(regulex);\n      };\n      script.onerror = () => {\n        reject(new Error(\"load regulex error!\"));\n      };\n      document.body.appendChild(script);\n    });\n  });\n}\n","import React from \"react\";\nimport Highlight, { defaultProps } from \"prism-react-renderer\";\nimport githubTheme from \"prism-react-renderer/themes/github\";\nimport { Box } from \"@material-ui/core\";\n\nexport type Language =\n  | \"markup\"\n  | \"bash\"\n  | \"clike\"\n  | \"c\"\n  | \"cpp\"\n  | \"css\"\n  | \"javascript\"\n  | \"jsx\"\n  | \"coffeescript\"\n  | \"actionscript\"\n  | \"css-extr\"\n  | \"diff\"\n  | \"git\"\n  | \"go\"\n  | \"graphql\"\n  | \"handlebars\"\n  | \"json\"\n  | \"less\"\n  | \"makefile\"\n  | \"markdown\"\n  | \"objectivec\"\n  | \"ocaml\"\n  | \"python\"\n  | \"reason\"\n  | \"sass\"\n  | \"scss\"\n  | \"sql\"\n  | \"stylus\"\n  | \"tsx\"\n  | \"typescript\"\n  | \"wasm\"\n  | \"yaml\";\n\nexport type CodeBlockProps = {\n  code: string;\n  language: Language;\n};\n\nexport const CodeBlock: React.FC<CodeBlockProps> = ({ code, language }) => {\n  return (\n    <Highlight\n      {...defaultProps}\n      code={code}\n      language={language}\n      theme={githubTheme}\n    >\n      {({ className, style, tokens, getLineProps, getTokenProps }) => (\n        <Box\n          component=\"pre\"\n          lineHeight={1.5}\n          py={1}\n          px={1}\n          className={className}\n          style={{...style, margin: 0}}\n        >\n          <Box component=\"code\">\n            {tokens.map((line, i) => (\n              <div {...getLineProps({ line, key: i })}>\n                {line.map((token, key) => (\n                  <span {...getTokenProps({ token, key })} />\n                ))}\n              </div>\n            ))}\n          </Box>\n        </Box>\n      )}\n    </Highlight>\n  );\n};\n","import React from \"react\";\r\nimport { Box, Tooltip, IconButton } from \"@material-ui/core\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport CopyToClipboard from \"react-copy-to-clipboard\";\r\nimport { FileCopyOutlined } from \"@material-ui/icons\";\r\nimport { useSnackbar } from \"notistack\";\r\n\r\nexport type CopyActionProps = {\r\n  text: string\r\n};\r\n\r\nexport const CopyAction: React.FC<CopyActionProps> = ({text}) => {\r\n  const styles = useStyles();\r\n  const { enqueueSnackbar } = useSnackbar();\r\n  return (\r\n    <Box display=\"flex\" className={styles.root}>\r\n      <CopyToClipboard\r\n        text={text}\r\n        onCopy={() => enqueueSnackbar(\"已复制!\", { autoHideDuration: 1500 })}\r\n      >\r\n        <Tooltip title=\"复制\" placement=\"top\">\r\n          <IconButton>\r\n            <FileCopyOutlined />\r\n          </IconButton>\r\n        </Tooltip>\r\n      </CopyToClipboard>\r\n    </Box>\r\n  );\r\n};\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {},\r\n}));\r\n","import React from \"react\";\r\nimport { Tooltip, IconButton } from \"@material-ui/core\";\r\nimport { OpenInNew } from \"@material-ui/icons\";\r\n\r\nexport type OutLinkProps = {\r\n  href: string;\r\n  title?: Exclude<React.ReactNode, null | undefined>;\r\n};\r\n\r\nexport const OutLink: React.FC<OutLinkProps> = ({ href, title = \"\" }) => {\r\n  return (\r\n    <Tooltip title={title}>\r\n      <IconButton component=\"a\" href={href} target=\"_blank\">\r\n        <OpenInNew />\r\n      </IconButton>\r\n    </Tooltip>\r\n  );\r\n};\r\n","import React from 'react'\nimport {Box, Chip} from '@material-ui/core'\nimport { makeStyles } from \"@material-ui/core/styles\";\n\nexport type RegExpChipsProps = {\n  onSelect?: (data: {source: string, flags: string}) => void\n}\n\nexport const RegExpChips: React.FC<RegExpChipsProps> = ({onSelect}) => {\n  const styles = useStyles()\n  return (\n    <Box display=\"flex\" flexWrap=\"wrap\" className={styles.tags}>\n      {REG_EXP_ARR.map(({ label, source }) => (\n        <Chip\n          key={label}\n          variant=\"outlined\"\n          label={label}\n          onClick={() => onSelect?.({ source, flags: \"\" })}\n        />\n      ))}\n    </Box>\n  );\n};\n\nconst useStyles = makeStyles(theme => ({\n  tags: {\n    \"& > *\": {\n      marginRight: theme.spacing(1),\n      marginBottom: theme.spacing(1),\n    },\n  },\n}))\n\nconst REG_EXP_ARR = [\n  {\n    label: \"身份证号\",\n    source: /^\\d{17}[0-9Xx]|\\d{15}$/.source,\n  },\n  {\n    label: \"Email地址\",\n    source: /^\\w[-\\w.+]*@([A-Za-z0-9][-A-Za-z0-9]+\\.)+[A-Za-z]{2,14}$/.source,\n  },\n  {\n    label: \"中文字符\",\n    source: /^[\\u4e00-\\u9fa5]+$/.source,\n  },\n  {\n    label: \"双字节字符(含汉字)\",\n    // eslint-disable-next-line no-control-regex\n    source: /^[^\\x00-\\xff]+$/.source,\n  },\n  {\n    label: \"时间(时:分:秒)\",\n    source: /^([01]?\\d|2[0-3]):[0-5]?\\d:[0-5]?\\d$/.source,\n  },\n  {\n    label: \"日期(年:月:日)\",\n    source: /^(([0-9]{3}[1-9]|[0-9]{2}[1-9][0-9]{1}|[0-9]{1}[1-9][0-9]{2}|[1-9][0-9]{3})-(((0[13578]|1[02])-(0[1-9]|[12][0-9]|3[01]))|((0[469]|11)-(0[1-9]|[12][0-9]|30))|(02-(0[1-9]|[1][0-9]|2[0-8]))))|((([0-9]{2})(0[48]|[2468][048]|[13579][26])|((0[48]|[2468][048]|[3579][26])00))-02-29)$/\n      .source,\n  },\n  {\n    label: \"IPv4地址\",\n    source: /^\\d{0,3}\\.\\d{0,3}\\.\\d{0,3}\\.\\d{0,3}$/.source,\n  },\n  {\n    label: \"手机号\",\n    source: /^(13\\d|14[579]|15[^4\\D]|17[^49\\D]|18\\d)\\d{8}$/.source,\n  },\n];\n","import React, { useMemo, useState, useEffect } from 'react'\nimport { Box, TextField, Typography } from '@material-ui/core'\nimport { CodeBlock, CopyAction, OutLink } from 'components'\n\nexport type RegExpTestPanelProps = {\n  source: string\n  flags?: string\n}\n\nexport const RegExpTestPanel: React.FC<RegExpTestPanelProps> = ({ source, flags }) => {\n  const [text, setText] = useState('')\n  const { code1, result1, error1, code2, result2, error2 } = useMemo(() => {\n    let regexp, result1, result2, error1, error2\n    try {\n      regexp = new RegExp(source, flags)\n      result1 = regexp.test(text)\n      result2 = text.search(regexp)\n    } catch (error) {\n      regexp = `/${source}/${flags}`\n      error1 = error2 = error as Error\n    }\n    // 无论构建正则是否抛出异常，源码都要正确显示\n    const escapedText = text.replace(/'/g, \"\\\\'\")\n    const code1 = `const result = ${regexp}.test('${escapedText}');`\n    const code2 = `const result = '${escapedText}'.search(${regexp});`\n    return { code1, result1, error1, code2, result2, error2 }\n  }, [flags, source, text])\n\n  // 输出到控制台\n  useEffect(() => {\n    console.log(code1)\n    console.log(result1)\n    console.log(code2)\n    console.log(result2)\n  }, [code1, code2, result1, result2])\n\n\n  return (\n    <Box display=\"flex\" flexDirection=\"column\">\n      <Box>\n        <TextField\n          variant=\"outlined\"\n          label=\"输入源文本\"\n          multiline\n          fullWidth\n          value={text}\n          onChange={(e) => setText(e.target.value)}\n        />\n      </Box>\n      <Box overflow=\"auto\">\n        <Box mt={2} display=\"flex\" alignItems=\"center\" flexWrap=\"wrap\" bgcolor=\"rgb(246, 248, 250)\">\n          <Box flexGrow={1}>\n            <CodeBlock code={`${code1!}`} language=\"javascript\" />\n          </Box>\n          <Box display=\"flex\">\n            <OutLink\n              title=\"RegExp.prototype.test() - MDN\"\n              href={\n                'https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/test'\n              }\n            />\n            <CopyAction text={code1!} />\n          </Box>\n        </Box>\n        <Box>\n          {error1 ? (\n            <Typography color=\"error\">{String(error1)}</Typography>\n          ) : (\n            <CodeBlock code={'// result\\n' + result1} language=\"javascript\" />\n          )}\n        </Box>\n        <Box mt={2} display=\"flex\" alignItems=\"center\" flexWrap=\"wrap\" bgcolor=\"rgb(246, 248, 250)\">\n          <Box flexGrow={1}>\n            <CodeBlock code={`${code2!}`} language=\"javascript\" />\n          </Box>\n          <Box display=\"flex\">\n            <OutLink\n              title=\"String.prototype.search() - MDN\"\n              href={\n                'https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/search'\n              }\n            />\n            <CopyAction text={code2!} />\n          </Box>\n        </Box>\n        <Box>\n          {error2 ? (\n            <Typography color=\"error\">{String(error2)}</Typography>\n          ) : (\n            <CodeBlock code={'// result\\n' + result2} language=\"javascript\" />\n          )}\n        </Box>\n      </Box>\n    </Box>\n  )\n}\n","import React, { useMemo, useState, useEffect } from 'react'\r\nimport { Box, TextField, Typography } from '@material-ui/core'\r\nimport { CodeBlock, CopyAction, OutLink } from 'components'\r\n\r\nexport type RegExpMatchPanelProps = {\r\n  source: string\r\n  flags?: string\r\n}\r\n\r\nconst supportMatchAll = 'matchAll' in String.prototype\r\n\r\nexport const RegExpMatchPanel: React.FC<RegExpMatchPanelProps> = ({ source, flags }) => {\r\n  const [text, setText] = useState('')\r\n  const { code1, result1, error1, code2, result2, error2, code3, result3, error3 } = useMemo(() => {\r\n    let regexp, result1, result2, result3, error1, error2, error3\r\n    try {\r\n      // 抛出异常情况：\r\n      // 1. 正则表达式不合法\r\n      regexp = new RegExp(source, flags)\r\n    } catch (error) {\r\n      regexp = (`/${source}/${flags}` as any) as RegExp\r\n      error1 = error2 = error3 = error as Error\r\n    }\r\n\r\n    if (!error1) {\r\n      result1 = regexp.exec(text)\r\n      result2 = text.match(regexp)\r\n      try {\r\n        // 抛出异常的情况：\r\n        // 1. 浏览器不支持 matchAll 时抛异常\r\n        // 2. 正则的 g 标志位未设置时抛异常\r\n        result3 = text.matchAll(regexp)\r\n      } catch (error) {\r\n        error3 = error as Error\r\n      }\r\n    }\r\n    const escapedText = text.replace(/'/g, \"\\\\'\")\r\n    const code1 = `const result = ${regexp}.exec('${escapedText}');`\r\n    const code2 = `const result = '${escapedText}'.match(${regexp});`\r\n    const code3 = `const result = '${escapedText}'.matchAll(${regexp});`\r\n\r\n    return { code1, result1, error1, code2, result2, error2, code3, result3, error3 }\r\n  }, [flags, source, text])\r\n\r\n  // 输出到控制台\r\n  useEffect(() => {\r\n    console.log(code1)\r\n    console.log(result1)\r\n    console.log(code2)\r\n    console.log(result2)\r\n    console.log(code3)\r\n    console.log(result3)\r\n  }, [code1, code2, code3, result1, result2, result3])\r\n\r\n  return (\r\n    <Box display=\"flex\" flexDirection=\"column\">\r\n      <Box>\r\n        <TextField\r\n          variant=\"outlined\"\r\n          label=\"输入待匹配文本\"\r\n          multiline\r\n          fullWidth\r\n          value={text}\r\n          onChange={(e) => setText(e.target.value)}\r\n        />\r\n      </Box>\r\n      <Box overflow=\"auto\">\r\n        <Box mt={2} display=\"flex\" alignItems=\"center\" flexWrap=\"wrap\" bgcolor=\"rgb(246, 248, 250)\">\r\n          <Box flexGrow={1}>\r\n            <CodeBlock code={`${code1!}`} language=\"javascript\" />\r\n          </Box>\r\n          <Box display=\"flex\">\r\n            <OutLink\r\n              title=\"RegExp.prototype.exec() - MDN\"\r\n              href={\r\n                'https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/exec'\r\n              }\r\n            />\r\n            <CopyAction text={code1!} />\r\n          </Box>\r\n        </Box>\r\n        <Box>\r\n          {error1 ? (\r\n            <Typography color=\"error\">{String(error1)}</Typography>\r\n          ) : (\r\n            <CodeBlock\r\n              code={'// result\\n' + stringifyRegExpExecArray(result1)}\r\n              language=\"javascript\"\r\n            />\r\n          )}\r\n        </Box>\r\n        <Box mt={2} display=\"flex\" alignItems=\"center\" flexWrap=\"wrap\" bgcolor=\"rgb(246, 248, 250)\">\r\n          <Box flexGrow={1}>\r\n            <CodeBlock code={`${code2!}`} language=\"javascript\" />\r\n          </Box>\r\n          <Box display=\"flex\">\r\n            <OutLink\r\n              title=\"String.prototype.match() - MDN\"\r\n              href={\r\n                'https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/match'\r\n              }\r\n            />\r\n            <CopyAction text={code2!} />\r\n          </Box>\r\n        </Box>\r\n        <Box>\r\n          {error2 ? (\r\n            <Typography color=\"error\">{String(error2)}</Typography>\r\n          ) : (\r\n            <CodeBlock\r\n              code={'// result\\n' + stringifyRegExpMatchArray(result2)}\r\n              language=\"javascript\"\r\n            />\r\n          )}\r\n        </Box>\r\n        {supportMatchAll && (\r\n          <>\r\n            <Box\r\n              mt={2}\r\n              display=\"flex\"\r\n              alignItems=\"center\"\r\n              flexWrap=\"wrap\"\r\n              bgcolor=\"rgb(246, 248, 250)\"\r\n            >\r\n              <Box flexGrow={1}>\r\n                <CodeBlock code={`${code3!}`} language=\"javascript\" />\r\n              </Box>\r\n              <Box display=\"flex\">\r\n                <OutLink\r\n                  title=\"String.prototype.matchAll() - MDN\"\r\n                  href={\r\n                    'https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/matchAll'\r\n                  }\r\n                />\r\n                <CopyAction text={code3!} />\r\n              </Box>\r\n            </Box>\r\n            <Box>\r\n              {error3 ? (\r\n                <Typography color=\"error\">{String(error3)}</Typography>\r\n              ) : (\r\n                <CodeBlock code={stringifyRegExpMatchAllResult(result3!)} language=\"javascript\" />\r\n              )}\r\n            </Box>\r\n          </>\r\n        )}\r\n      </Box>\r\n    </Box>\r\n  )\r\n}\r\n\r\nfunction stringifyRegExpExecArray(result: RegExpExecArray | null | undefined): string {\r\n  if (!result) return JSON.stringify(result)\r\n  let str = '['\r\n  result.forEach((value, index) => (str += `\\n  ${index}: ${JSON.stringify(value)},`))\r\n  str += `\\n  index: ${JSON.stringify(result.index)}`\r\n  str += `\\n  input: ${JSON.stringify(result.input)}`\r\n  str += `\\n  groups: ${JSON.stringify(result.groups, null, 2)?.replace(/\\n/g, '\\n  ')},`\r\n  str += `\\n  length: ${JSON.stringify(result.length)}`\r\n  str += `\\n]`\r\n  return str\r\n}\r\n\r\nfunction stringifyRegExpMatchArray(result: RegExpMatchArray | null | undefined): string {\r\n  if (!result || 'index' in result) {\r\n    return stringifyRegExpExecArray(result as RegExpExecArray)\r\n  } else {\r\n    return JSON.stringify(result)\r\n  }\r\n}\r\n\r\nfunction stringifyRegExpMatchAllResult(result: IterableIterator<RegExpMatchArray>): string {\r\n  let str = ''\r\n  let item: IteratorResult<RegExpMatchArray, undefined>\r\n  do {\r\n    item = result.next()\r\n    str += `// result.next()\\n`\r\n    str += `{\r\n  value: ${stringifyRegExpMatchArray(item.value)?.replace(/\\n/g, '\\n  ')},\r\n  done: ${item.done}\r\n}\\n`\r\n  } while (!item.done)\r\n  return str\r\n}\r\n","import React, { useMemo, useState, useEffect } from 'react'\nimport { Box, TextField, Typography } from '@material-ui/core'\nimport { CodeBlock, CopyAction, OutLink } from 'components'\n\nexport type RegExpReplacePanelProps = {\n  source: string\n  flags?: string\n}\n\nexport const RegExpReplacePanel: React.FC<RegExpReplacePanelProps> = ({ source, flags }) => {\n  const [text, setText] = useState('')\n  const [replacer, setReplacer] = useState('')\n  const { code1, result1, error1} = useMemo(() => {\n    let regexp, result1, error1\n    try {\n\n      regexp = new RegExp(source, flags)\n      result1 = text.replace(regexp, replacer.replace(/\\\\n/g, '\\n'))\n    } catch (error) {\n      regexp = `/${source}/${flags}`\n      error1 = error as Error\n    }\n    // 无论构建正则是否抛出异常，源码都要正确显示\n    const escapedText = text.replace(/`/g, \"\\\\`\")\n    const escapedReplacer = replacer.replace(/`/g, \"\\\\`\")\n    const code1 = `const result = \\`${escapedText}\\`.replace(${regexp}, \\`${escapedReplacer}\\`);`\n    return { code1, result1, error1}\n  }, [flags, replacer, source, text])\n\n  // 输出到控制台\n  useEffect(() => {\n    console.log(code1)\n    console.log(result1)\n  }, [code1, result1])\n\n  return (\n    <Box display=\"flex\" flexDirection=\"column\">\n      <Box>\n        <TextField\n          variant=\"outlined\"\n          label=\"输入文本\"\n          multiline\n          fullWidth\n          value={text}\n          onChange={(e) => setText(e.target.value)}\n        />\n      </Box>\n      <Box mt={1}>\n        <TextField\n          variant=\"outlined\"\n          label=\"输入替换内容\"\n          multiline\n          fullWidth\n          value={replacer}\n          onChange={(e) => setReplacer(e.target.value)}\n        />\n      </Box>\n      <Box overflow=\"auto\">\n        <Box mt={2} display=\"flex\" alignItems=\"center\" flexWrap=\"wrap\" bgcolor=\"rgb(246, 248, 250)\">\n          <Box flexGrow={1}>\n            <CodeBlock code={`${code1!}`} language=\"javascript\" />\n          </Box>\n          <Box display=\"flex\">\n            <OutLink\n              title=\"RegExp.prototype.replace() - MDN\"\n              href={\n                'https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replace'\n              }\n            />\n            <CopyAction text={code1!} />\n          </Box>\n        </Box>\n        <Box>\n          {error1 ? (\n            <Typography color=\"error\">{String(error1)}</Typography>\n          ) : (\n            <CodeBlock code={`// result\\n\\`${result1?.replace(/`/g, '\\\\`')}\\``} language=\"javascript\" />\n          )}\n        </Box>\n      </Box>\n    </Box>\n  )\n}\n","import React, { useState, useMemo, useCallback } from 'react'\nimport PageLayout from 'layout/PageLayout'\nimport {\n  Select,\n  Input,\n  Box,\n  Tabs,\n  Tab,\n  useMediaQuery,\n  Checkbox,\n  FormControlLabel,\n  CardContent,\n  CardActions,\n  Card,\n  Collapse,\n  Button,\n  MenuItem,\n} from '@material-ui/core'\nimport { makeStyles, useTheme } from '@material-ui/core/styles'\nimport { useQuery } from 'hooks'\nimport { ExpandMore } from '@material-ui/icons'\nimport clsx from 'clsx'\nimport { VisualRegExp, RegExpType, CodeBlock, CopyAction, OutLink } from 'components'\nimport { RegExpChips } from './RegExpChips'\nimport { RegExpTestPanel } from './RegExpTestPanel'\nimport { RegExpMatchPanel } from './RegExpMatchPanel'\nimport { RegExpReplacePanel } from './RegExpReplacePanel'\n\ndeclare module '@material-ui/core/styles/createMuiTheme' {\n  interface Theme {\n    codeFontFamily: string\n  }\n}\n\nenum Language {\n  JavaScript = 'JavaScript',\n}\n\nenum TabIndex {\n  TEST,\n  MATCH,\n  REPLACE,\n  COMMONLY_USED_REGEXP,\n}\n\nconst useStyles = makeStyles((theme) => ({\n  regexpInput: {\n    fontSize: '1.4em',\n    fontFamily: theme.codeFontFamily,\n  },\n  code: {\n    fontFamily: theme.codeFontFamily,\n  },\n  tags: {\n    '& > *': {\n      marginRight: theme.spacing(1),\n      marginBottom: theme.spacing(1),\n    },\n  },\n  expand: {\n    transform: 'rotate(0deg)',\n    transition: theme.transitions.create('transform', {\n      duration: theme.transitions.duration.shortest,\n    }),\n  },\n  expandOpen: {\n    transform: 'rotate(180deg)',\n  },\n}))\n\ntype PanelProps = {\n  regexp: RegExpType\n  value: string\n  onChange: (newValue: string) => void\n}\n\n\nconst TabPanel: React.FC<{ id: number; value: number }> = ({ children, id, value, ...props }) => {\n  return <Box {...props}>{id === value && <Box pt={3}>{children}</Box>}</Box>\n}\n\n// const RegExpReplacePanel: React.FC<RegExpReplacePanelProps> = ({\n//   regexp,\n//   value,\n//   onChange,\n//   newValue,\n//   onNewValueChange,\n// }) => {\n//   const [newSubText, matches] = useMemo(() => {\n//     let jsRegExp;\n//     try {\n//       jsRegExp = new RegExp(regexp.source, regexp.flags);\n//     } catch (err) {\n//       debugErr(err);\n//       return [\"\", null];\n//     }\n//     const newSubText = value.replace(jsRegExp, newValue);\n//     const matches = jsRegExp.exec(value);\n//     console.log(\"matches:\", matches);\n//     return [newSubText, matches];\n//   }, [regexp.flags, regexp.source, newValue, value]);\n//   return (\n//     <>\n//       <Box>\n//         <TextField\n//           variant=\"outlined\"\n//           label=\"输入源文本\"\n//           multiline\n//           fullWidth\n//           value={value}\n//           onChange={(e) => onChange(e.target.value)}\n//         />\n//       </Box>\n//       {matches !== null && (\n//         <Box mt={2}>\n//           <NameValue name=\"$$\" value=\"$\" />\n//           <NameValue name=\"$&\" value={matches[0]} />\n//           <NameValue\n//             name=\"$`\"\n//             value={matches.input.substring(0, matches.index)}\n//           />\n//           <NameValue\n//             name=\"$'\"\n//             value={matches.input.substring(matches.index + matches[0].length)}\n//           />\n//           {matches.map((group, n) =>\n//             n >= 1 ? <NameValue name={\"$\" + n} value={group} /> : null\n//           )}\n//         </Box>\n//       )}\n//       <Box mt={2}>\n//         <TextField\n//           variant=\"outlined\"\n//           label=\"输入替换文本\"\n//           multiline\n//           fullWidth\n//           value={newValue}\n//           onChange={(e) => onNewValueChange(e.target.value)}\n//         />\n//       </Box>\n//       <Box mt={2}>\n//         <Box>{newSubText}</Box>\n//       </Box>\n//     </>\n//   );\n// };\n\nconst flagItems = [\n  {\n    flag: 'g',\n    label: '全局匹配',\n  },\n  {\n    flag: 'i',\n    label: '忽略大小写',\n  },\n  {\n    flag: 'm',\n    label: '多行匹配',\n  },\n] as const\n\nconst useRegExp = () => {\n  const [query, setQuery] = useQuery()\n  const source = query.source || ''\n  const flags = query.flags || ''\n  const regexp: RegExpType = { source, flags }\n  const setRegExp = useCallback(\n    (regexp: RegExpType) => {\n      setQuery({ ...query, ...regexp })\n    },\n    [query, setQuery]\n  )\n  return [regexp, setRegExp] as const\n}\n\nconst useTabIndex = (defaultValue: number = TabIndex.TEST) => {\n  const [query, setQuery] = useQuery()\n  const tabIndex = parseInt(query.tab ?? defaultValue)\n  const setTabIndex = useCallback(\n    (tabIndex: number) => {\n      setQuery({ ...query, tab: String(tabIndex) })\n    },\n    [query, setQuery]\n  )\n  return [tabIndex, setTabIndex] as const\n\n}\n\nconst RegExpPage: React.FC = () => {\n  const styles = useStyles()\n  const [tabIndex, setTabIndex] = useTabIndex(TabIndex.TEST);\n  const [regexp, setRegexp] = useRegExp()\n  const [text] = useState('')\n  const [newText] = useState('')\n  const theme = useTheme()\n  const matches = useMediaQuery(theme.breakpoints.down('sm'))\n  const [expanded, setExpanded] = useState(false)\n  const [language, setLanguage] = useState(Language.JavaScript)\n\n  // 单个标志位变化\n  const onFlagChange = (flag: 'g' | 'i' | 'm', checked: boolean) => {\n    let newFlags = regexp.flags.replace(new RegExp(flag, 'g'), '')\n    newFlags += checked ? flag : ''\n    setRegexp({ ...regexp, flags: newFlags })\n  }\n\n  // 一组标志位变化\n  const onFlagsChange: React.ChangeEventHandler<HTMLInputElement> = (e) => {\n    let newFlags = e.target.value\n    // 去除无效标志位\n    newFlags = newFlags.replace(/[^gim]/, '')\n    // 去重\n    'gim'.split('').forEach((flag) => {\n      if (newFlags.includes(flag)) {\n        newFlags = newFlags.replace(new RegExp(flag, 'g'), '') + flag\n      }\n    })\n    setRegexp({ ...regexp, flags: newFlags })\n  }\n\n  const separator = (\n    <Box pt=\"6px\" pb=\"7px\" color=\"primary.main\">\n      /\n    </Box>\n  )\n\n  const code = useMemo(() => {\n    let code = ''\n    if (!expanded) return code\n    if (tabIndex === TabIndex.TEST) {\n      code = `const str = \"${text}\";\n/${regexp.source}/${regexp.flags}.test(str)`\n    } else if (tabIndex === TabIndex.MATCH) {\n      code = `const str = \"${text}\";\n/${regexp.source}/${regexp.flags}.exec(str)`\n    } else if (tabIndex === TabIndex.REPLACE) {\n      code = `const str = \"${text}\";\nstr.replace(/${regexp.source}/${regexp.flags}, \"${newText}\")`\n    }\n    return code\n  }, [expanded, newText, regexp, tabIndex, text])\n  return (\n    <PageLayout title=\"正则表达式\">\n      <Box display=\"flex\" flexDirection=\"column\">\n        <Box display=\"flex\">\n          <Box flexGrow={{ xs: 2, md: 4 }} flexBasis={0}>\n            <Input\n              className={styles.regexpInput}\n              startAdornment={separator}\n              placeholder=\"pattern\"\n              fullWidth\n              value={regexp.source}\n              onChange={(e) => setRegexp({ ...regexp, source: e.target.value })}\n            />\n          </Box>\n          <Box flexGrow={{ xs: 1, md: 1 }} flexBasis={0}>\n            <Input\n              className={styles.regexpInput}\n              startAdornment={separator}\n              placeholder=\"flags\"\n              fullWidth\n              value={regexp.flags}\n              onChange={onFlagsChange}\n            />\n          </Box>\n        </Box>\n\n        <Box display=\"flex\" mt={1} flexWrap=\"wrap\">\n          {flagItems.map((item) => (\n            <FormControlLabel\n              key={item.flag}\n              control={\n                <Checkbox\n                  checked={regexp.flags.includes(item.flag)}\n                  onChange={(_, checked) => onFlagChange(item.flag, checked)}\n                  color=\"primary\"\n                />\n              }\n              label={item.label}\n            />\n          ))}\n          <Box flexGrow={1} display=\"flex\" justifyContent=\"flex-end\" alignItems=\"center\" mr={1}>\n            <OutLink\n              title=\"RegExp - MDN\"\n              href={\n                'https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp'\n              }\n            />\n            <OutLink\n              title=\"Regular expressions - MDN\"\n              href={\n                'https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions'\n              }\n            />\n            <CopyAction text={`/${regexp.source}/${regexp.flags}`} />\n          </Box>\n        </Box>\n\n        <Box mt={1}>\n          <VisualRegExp regexp={regexp} />\n          {/* <Tooltip title=\"分享\" arrow placement=\"top\">\n            <CopyToClipboard\n              text={href || \"\"}\n              onCopy={() =>\n                enqueueSnackbar(\n                  <span>\n                    <a\n                      href={href}\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                      style={{ color: \"white\" }}\n                    >\n                      {href}\n                    </a>{\" \"}\n                    已复制，快去分享吧！\n                  </span>\n                )\n              }\n            >\n              <IconButton>\n                <Share />\n              </IconButton>\n            </CopyToClipboard>\n          </Tooltip> */}\n        </Box>\n\n        <Box mt={2}>\n          <Tabs\n            value={tabIndex}\n            onChange={(_, value) => setTabIndex(value)}\n            textColor=\"primary\"\n            indicatorColor=\"primary\"\n            variant={matches ? 'fullWidth' : 'standard'}\n          >\n            <Tab label=\"测试\"></Tab>\n            <Tab label=\"匹配\"></Tab>\n            <Tab label=\"替换\"></Tab>\n            <Tab label=\"常用正则\"></Tab>\n          </Tabs>\n          <TabPanel id={TabIndex.TEST} value={tabIndex}>\n            <RegExpTestPanel source={regexp.source} flags={regexp.flags} />\n          </TabPanel>\n          <TabPanel id={TabIndex.MATCH} value={tabIndex}>\n            <RegExpMatchPanel source={regexp.source} flags={regexp.flags} />\n          </TabPanel>\n          <TabPanel id={TabIndex.REPLACE} value={tabIndex}>\n            {/* <RegExpReplacePanel\n              regexp={regexp}\n              value={text}\n              onChange={setText}\n              newValue={newText}\n              onNewValueChange={setNewText}\n            /> */}\n            <RegExpReplacePanel source={regexp.source} flags={regexp.flags} />\n          </TabPanel>\n          <TabPanel id={TabIndex.COMMONLY_USED_REGEXP} value={tabIndex}>\n            <RegExpChips onSelect={(regexp) => setRegexp(regexp)} />\n          </TabPanel>\n        </Box>\n      </Box>\n\n      {/* 测试/匹配/替换 */}\n      <Box my={2} display=\"none\">\n        <Card>\n          <CardContent></CardContent>\n          <CardActions>\n            {expanded && (\n              <Box ml={1}>\n                <Select value={language} onChange={(e) => setLanguage(e.target.value as Language)}>\n                  <MenuItem value={Language.JavaScript}>JavaScript</MenuItem>\n                </Select>\n              </Box>\n            )}\n            <Button\n              style={{ marginLeft: 'auto' }}\n              endIcon={\n                <ExpandMore\n                  className={clsx(styles.expand, {\n                    [styles.expandOpen]: expanded,\n                  })}\n                />\n              }\n              onClick={() => setExpanded(!expanded)}\n            >\n              生成代码\n            </Button>\n          </CardActions>\n          {/* 生成代码 */}\n          <Collapse in={expanded}>\n            <CardContent>\n              <CodeBlock code={code} language=\"javascript\" />\n            </CardContent>\n            <CardActions>\n              <CopyAction text={code} />\n            </CardActions>\n          </Collapse>\n        </Card>\n      </Box>\n    </PageLayout>\n  )\n}\n\nexport default RegExpPage\n"],"sourceRoot":""}