{"version":3,"sources":["pages/RegExpPage.tsx","hooks/useRegulex.ts","hooks/useQuery.ts"],"names":["useStyles","makeStyles","theme","regexpContainer","width","overflow","textAlign","error","color","input","height","fontFamily","codeFontFamily","code","tags","marginRight","spacing","marginBottom","NameValue","name","value","styles","Box","display","className","mt","whiteSpace","style","wordBreak","TabPanel","children","id","props","p","RegExpVisualPanel","regexp","containerRef","useRef","regulex","useAsync","a","async","Promise","resolve","reject","script","document","createElement","src","process","onload","window","require","onerror","Error","body","appendChild","useState","setError","useEffect","current","innerHTML","parse","visualize","paper","Raphael","source","flags","undefined","err","_err","RegexSyntaxError","msg","message","lastIndex","push","repeat","join","Typography","component","ref","RegExpTestPanel","onChange","isEmpty","matched","useMemo","RegExp","test","TextField","variant","label","multiline","fullWidth","e","target","ml","grey","green","red","RegExpMatchPanel","matches","exec","map","group","n","RegExpReplacePanel","subText","setSubText","jsRegExp","newSubText","replace","console","log","substring","index","length","flagItems","flag","useRegExp","useLocation","pathname","search","history","useHistory","searchParams","URLSearchParams","query","key","useCallback","toString","useQuery","setQuery","mostRegExps","RegExpPage","tabIndex","setTabIndex","text","setText","setRegexp","useTheme","useMediaQuery","breakpoints","down","separator","useSnackbar","enqueueSnackbar","useWindowLocation","href","pt","pb","PageLayout","title","Card","CardHeader","CardContent","Grid","container","item","xs","sm","Input","startAdornment","placeholder","newFlags","split","forEach","includes","CardActions","FormControlLabel","control","Checkbox","checked","_","onFlagChange","my","Tabs","textColor","indicatorColor","Tab","onChangeIndex","IconButton","onClick","flexWrap","Chip"],"mappings":"gbA6CMA,EAAYC,aAAW,SAAAC,GAAK,MAAK,CACrCC,gBAAiB,CACfC,MAAO,OACPC,SAAU,OACVC,UAAW,UAEbC,MAAO,CACLH,MAAO,OACPI,MAAO,MACPH,SAAU,QAEZI,MAAO,CACLC,OAAQ,OACRC,WAAYT,EAAMU,gBAEpBC,KAAM,CACJF,WAAYT,EAAMU,gBAEpBE,KAAM,CACJ,QAAS,CACPC,YAAab,EAAMc,QAAQ,GAC3BC,aAAcf,EAAMc,QAAQ,SAgB5BE,EAAgE,SAAC,GAGhE,IAFLC,EAEI,EAFJA,KACAC,EACI,EADJA,MAEMC,EAASrB,IACf,OACE,kBAACsB,EAAA,EAAD,CAAKC,QAAQ,OAAOC,UAAWH,EAAOR,KAAMY,GAAI,GAC9C,kBAACH,EAAA,EAAD,CAAKI,WAAW,UAAUP,EAA1B,SACA,kBAACG,EAAA,EAAD,CAAKK,MAAO,CAAEC,UAAW,cAAgBR,KAKzCS,EAAoD,SAAC,GAKpD,IAJLC,EAII,EAJJA,SACAC,EAGI,EAHJA,GACAX,EAEI,EAFJA,MACGY,EACC,yCACJ,OAAO,kBAACV,EAAA,EAAQU,EAAQD,IAAOX,GAAS,kBAACE,EAAA,EAAD,CAAKW,EAAG,GAAIH,KAGhDI,EAAqD,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OACtDC,EAAeC,iBAAuB,MACtChB,EAASrB,IACAsC,ECxGRC,aAAS,oBAAAC,EAAAC,OAAA,yEACP,IAAIC,SAAa,SAACC,EAASC,GAChC,IAAMC,EAASC,SAASC,cAAc,UACtCF,EAAOG,IAAMC,eACbJ,EAAOK,OAAS,WACd,IAAMZ,EAAUa,OAAOC,QAAQ,WAC/BT,EAAQL,IAEVO,EAAOQ,QAAU,WACfT,EAAO,IAAIU,MAAM,yBAEnBR,SAASS,KAAKC,YAAYX,OAXd,wCDwGRzB,MAHiE,EAI/CqC,qBAJ+C,mBAIlElD,EAJkE,KAI3DmD,EAJ2D,KAiCzE,OA5BAC,qBAAU,WACR,GAAKrB,GAAYF,EAAawB,QAA9B,CAGAxB,EAAawB,QAAQC,UAAY,GAJnB,IAMNC,EAA8BxB,EAA9BwB,MAAOC,EAAuBzB,EAAvByB,UACXC,GAAQC,EAD0B3B,EAAZ2B,SACN7B,EAAawB,QAAS,EAAG,GAC7C,IAEEG,EAAUD,EAAM3B,EAAO+B,QAAS/B,EAAOgC,MAAOH,GAE9CN,OAASU,GACT,MAAOC,GACP,IAAIC,EAAOD,EAEX,GAAIA,aAAeP,EAAMS,iBAAkB,CACzC,IAAIC,EAAM,CAAC,SAAWH,EAAII,QAAS,IACN,kBAAlBJ,EAAIK,YACbF,EAAIG,KAAKxC,EAAO+B,QAChBM,EAAIG,KAAK,IAAIC,OAAOP,EAAIK,WAAa,MAEvCJ,EAAO,IAAIhB,MAAMkB,EAAIK,KAAK,OAE5BnB,EAASY,OAGV,CAACnC,EAAQG,IAEV,kBAAChB,EAAA,EAAD,KACGf,GACC,kBAACuE,EAAA,EAAD,CAAYtD,UAAWH,EAAOd,MAAOwE,UAAU,OAC7C,8BAAOxE,EAAMkE,UAGjB,yBACEO,IAAK5C,EACLZ,UAAWH,EAAOlB,gBAClBwB,MAAO,CAAEjB,OAAQH,EAAQ,EAAI,YAM/B0E,EAAwC,SAAC,GAAiC,IAA/B9C,EAA8B,EAA9BA,OAAQf,EAAsB,EAAtBA,MAAO8D,EAAe,EAAfA,SACxDC,GAAW/D,IAAUe,EAAO+B,OAC5BkB,EAAUC,mBAAQ,WACtB,GAAIF,EAAS,OAAO,EAGpB,IAEE,OADW,IAAIG,OAAOnD,EAAO+B,OAAQ/B,EAAOgC,OAC5BoB,KAAKnE,GACrB,MAAOiD,GAEP,OAAO,KAER,CAAClC,EAAQf,EAAO+D,IACnB,OACE,oCACE,kBAAC7D,EAAA,EAAD,KACE,kBAACkE,EAAA,EAAD,CACEC,QAAQ,WACRC,MAAM,iCACNC,WAAS,EACTC,WAAS,EACTxE,MAAOA,EACP8D,SAAU,SAAAW,GAAC,OAAIX,EAASW,EAAEC,OAAO1E,WAGrC,kBAACE,EAAA,EAAD,CAAKG,GAAI,EAAGsE,GAAI,GACbZ,EACC,kBAAC7D,EAAA,EAAD,CAAKd,MAAOwF,IAAK,MAAjB,MACEZ,EACF,kBAAC9D,EAAA,EAAD,CAAKd,MAAOyF,IAAM,MAAlB,iBAEA,kBAAC3E,EAAA,EAAD,CAAKd,MAAO0F,IAAI,MAAhB,0BAOJC,EAAyC,SAAC,GAIzC,IAHLhE,EAGI,EAHJA,OACAf,EAEI,EAFJA,MACA8D,EACI,EADJA,SAEMC,GAAW/D,IAAUe,EAAO+B,OAC5BkC,EAAUf,mBAAQ,WACtB,GAAIF,EAAS,OAAO,KAGpB,IAEE,OADW,IAAIG,OAAOnD,EAAO+B,OAAQ/B,EAAOgC,OAC5BkC,KAAKjF,GACrB,MAAOiD,GAEP,OAAO,QAER,CAACc,EAAShD,EAAQf,IACrB,OACE,oCACE,kBAACE,EAAA,EAAD,KACE,kBAACkE,EAAA,EAAD,CACEC,QAAQ,WACRC,MAAM,iCACNC,WAAS,EACTC,WAAS,EACTxE,MAAOA,EACP8D,SAAU,SAAAW,GAAC,OAAIX,EAASW,EAAEC,OAAO1E,WAGrC,kBAACE,EAAA,EAAD,CAAKG,GAAI,GACN0D,GAAW,kBAAC7D,EAAA,EAAD,CAAKd,MAAOwF,IAAK,MAAjB,OACVb,GAAuB,OAAZiB,GAAoB,kBAAC9E,EAAA,EAAD,CAAKd,MAAO0F,IAAI,MAAhB,wBAC/Bf,GAAuB,OAAZiB,GACX,kBAAC9E,EAAA,EAAD,KACE,kBAACA,EAAA,EAAD,CAAKd,MAAOyF,IAAM,MAAlB,iBACA,kBAAC3E,EAAA,EAAD,CAAKK,MAAO,CAAEtB,SAAU,SACrB+F,EAAQE,KAAI,SAACC,EAAOC,GAAR,OACX,kBAAC,EAAD,CAAWrF,KAAI,wBAASqF,GAAKpF,MAAOmF,YAU9CE,EAA2C,SAAC,GAI3C,IAHLtE,EAGI,EAHJA,OACAf,EAEI,EAFJA,MACA8D,EACI,EADJA,SACI,EAC0BzB,mBAAS,IADnC,mBACGiD,EADH,KACYC,EADZ,OAE0BtB,mBAAQ,WAGpC,IAAIuB,EACJ,IACEA,EAAW,IAAItB,OAAOnD,EAAO+B,OAAQ/B,EAAOgC,OAC5C,MAAOE,GAEP,MAAO,CAAC,GAAI,MAEd,IAAMwC,EAAazF,EAAM0F,QAAQF,EAAUF,GACrCN,EAAUQ,EAASP,KAAKjF,GAE9B,OADA2F,QAAQC,IAAI,WAAYZ,GACjB,CAACS,EAAYT,KACnB,CAACjE,EAAOgC,MAAOhC,EAAO+B,OAAQwC,EAAStF,IAhBtC,mBAEGyF,EAFH,KAEeT,EAFf,KAiBJ,OACE,oCACE,kBAAC9E,EAAA,EAAD,KACE,kBAACkE,EAAA,EAAD,CACEC,QAAQ,WACRC,MAAM,iCACNC,WAAS,EACTC,WAAS,EACTxE,MAAOA,EACP8D,SAAU,SAAAW,GAAC,OAAIX,EAASW,EAAEC,OAAO1E,WAGxB,OAAZgF,GACC,kBAAC9E,EAAA,EAAD,CAAKG,GAAI,GACP,kBAAC,EAAD,CAAWN,KAAK,KAAKC,MAAM,MAC3B,kBAAC,EAAD,CAAWD,KAAK,KAAKC,MAAOgF,EAAQ,KACpC,kBAAC,EAAD,CACEjF,KAAK,KACLC,MAAOgF,EAAQ3F,MAAMwG,UAAU,EAAGb,EAAQc,SAE5C,kBAAC,EAAD,CACE/F,KAAK,KACLC,MAAOgF,EAAQ3F,MAAMwG,UAAUb,EAAQc,MAAQd,EAAQ,GAAGe,UAE3Df,EAAQE,KAAI,SAACC,EAAOC,GAAR,OACXA,GAAK,EAAI,kBAAC,EAAD,CAAWrF,KAAM,IAAMqF,EAAGpF,MAAOmF,IAAY,SAI5D,kBAACjF,EAAA,EAAD,CAAKG,GAAI,GACP,kBAAC+D,EAAA,EAAD,CACEC,QAAQ,WACRC,MAAM,uCACNC,WAAS,EACTC,WAAS,EACTxE,MAAOsF,EACPxB,SAAU,SAAAW,GAAC,OAAIc,EAAWd,EAAEC,OAAO1E,WAGvC,kBAACE,EAAA,EAAD,CAAKG,GAAI,GACP,kBAACH,EAAA,EAAD,KAAMuF,MAMRO,EAAY,CAChB,CACEC,KAAM,IACN3B,MAAO,4BAET,CACE2B,KAAM,IACN3B,MAAO,kCAET,CACE2B,KAAM,IACN3B,MAAO,6BAIL4B,EAAY,WAAO,IAAD,EE3TA,WAAO,IAAD,EACDC,cAApBC,EADqB,EACrBA,SAAUC,EADW,EACXA,OACXC,EAAUC,cACVC,EAAe,IAAIC,gBAAgBJ,GACnCK,EAAgC,GAJV,uBAK5B,IAAI,IAAJ,IAAwBF,EAAxB,+CAAsC,CAAC,IAAD,6BAA7BG,EAA6B,KAAxB3G,EAAwB,KACpC0G,EAAMC,GAAO3G,GANa,kFAgB5B,MAAO,CAAC0G,EARSE,uBACf,SAACF,GACC,IAAML,EAAS,IAAII,gBAAgBC,GAAOG,WAC1CP,EAAQZ,QAAQ,CAAEU,WAAUC,aAE9B,CAACC,EAASF,KF+ScU,GADJ,mBACfJ,EADe,KACRK,EADQ,KAWtB,MAAO,CAPmB,CAAEjE,OAFb4D,EAAM5D,QAAU,GAEKC,MADtB2D,EAAM3D,OAAS,IAEX6D,uBAChB,SAAC7F,GACCgG,EAAShG,KAEX,CAACgG,MA6LCC,EAAc,CAClB,CACE1C,MAAO,2BACPxB,OAAQ,yBAAyBA,QAEnC,CACEwB,MAAO,oBACPxB,OAAQ,2DAA2DA,QAErE,CACEwB,MAAO,2BACPxB,OAAQ,qBAAqBA,QAE/B,CACEwB,MAAO,qDAEPxB,OAAQ,kBAAkBA,QAE5B,CACEwB,MAAO,qCACPxB,OAAQ,uCAAuCA,QAEjD,CACEwB,MAAO,qCACPxB,OAAQ,uRAAuRA,QAEjS,CACEwB,MAAO,mBACPxB,OAAQ,uCAAuCA,QAEjD,CACEwB,MAAO,qBACPxB,OAAQ,gDAAgDA,SAI7CmE,UA3Nc,WAC3B,IAAMhH,EAASrB,IADkB,EAEDyD,mBAAS,GAFR,mBAE1B6E,EAF0B,KAEhBC,EAFgB,OAGT9E,mBAAS,IAHA,mBAG1B+E,EAH0B,KAGpBC,EAHoB,OAILnB,IAJK,mBAI1BnF,EAJ0B,KAIlBuG,EAJkB,KAK3BxI,EAAQyI,cACRvC,EAAUwC,YAAc1I,EAAM2I,YAAYC,KAAK,OAyB/CC,GAxBsBC,wBAApBC,gBACSC,cAATC,KAwBN,kBAAC7H,EAAA,EAAD,CAAK8H,GAAG,MAAMC,GAAG,MAAM7I,MAAM,gBAA7B,MAIF,OACE,kBAAC8I,EAAA,EAAD,CAAYC,MAAM,kCAChB,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAYF,MAAM,mCAClB,kBAACG,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAMC,WAAS,GACb,kBAACD,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,EAAGC,GAAI,IACpB,kBAACC,EAAA,EAAD,CACExI,UAAWH,EAAOR,KAClBoJ,eAAgBlB,EAChBmB,YAAY,UACZtE,WAAS,EACTxE,MAAOe,EAAO+B,OACdgB,SAAU,SAAAW,GAAC,OAAI6C,EAAU,eAAKvG,EAAN,CAAc+B,OAAQ2B,EAAEC,OAAO1E,aAG3D,kBAACuI,EAAA,EAAD,CAAME,MAAI,EAACC,IAAE,EAACC,IAAE,GACd,kBAACC,EAAA,EAAD,CACExI,UAAWH,EAAOR,KAClBoJ,eAAgBlB,EAChBmB,YAAY,QACZtE,WAAS,EACTxE,MAAOe,EAAOgC,MACde,SAzCoD,SAAAW,GAChE,IAAIsE,EAAWtE,EAAEC,OAAO1E,MAExB+I,EAAWA,EAASrD,QAAQ,SAAU,IAEtC,MAAMsD,MAAM,IAAIC,SAAQ,SAAAhD,GAClB8C,EAASG,SAASjD,KACpB8C,EAAWA,EAASrD,QAAQ,IAAIxB,OAAO+B,EAAM,KAAM,IAAMA,MAG7DqB,EAAU,eAAKvG,EAAN,CAAcgC,MAAOgG,WAoC1B,kBAACI,EAAA,EAAD,KACE,kBAACZ,EAAA,EAAD,CAAMC,WAAS,GACZxC,EAAUd,KAAI,SAAAuD,GAAI,OACjB,kBAACF,EAAA,EAAD,CAAME,MAAI,GACR,kBAACW,EAAA,EAAD,CACEC,QACE,kBAACC,EAAA,EAAD,CACEC,QAASxI,EAAOgC,MAAMmG,SAAST,EAAKxC,MACpCnC,SAAU,SAAC0F,EAAGD,GAAJ,OA7DT,SAACtD,EAAuBsD,GAC3C,IAAIR,EAAWhI,EAAOgC,MAAM2C,QAAQ,IAAIxB,OAAO+B,EAAM,KAAM,IAC3D8C,GAAYQ,EAAUtD,EAAO,GAC7BqB,EAAU,eAAKvG,EAAN,CAAcgC,MAAOgG,KA2DVU,CAAahB,EAAKxC,KAAMsD,IAE1BnK,MAAM,YAGVkF,MAAOmE,EAAKnE,eAOxB,kBAACpE,EAAA,EAAD,CAAKG,GAAI,GACP,kBAAC+H,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAYF,MAAM,uBAClB,kBAACG,EAAA,EAAD,KACE,kBAAC,EAAD,CAAmBvH,OAAQA,OA+BjC,kBAACb,EAAA,EAAD,CAAKwJ,GAAI,GACP,kBAACtB,EAAA,EAAD,KACE,kBAACE,EAAA,EAAD,KACE,kBAACqB,EAAA,EAAD,CACE3J,MAAOkH,EACPpD,SAAU,SAAC0F,EAAGxJ,GAAJ,OAAcmH,EAAYnH,IACpC4J,UAAU,UACVC,eAAe,UACfxF,QAASW,EAAU,YAAc,YAEjC,kBAAC8E,EAAA,EAAD,CAAKxF,MAAM,iBACX,kBAACwF,EAAA,EAAD,CAAKxF,MAAM,iBACX,kBAACwF,EAAA,EAAD,CAAKxF,MAAM,kBAEb,kBAAC,IAAD,CAAgBwB,MAAOoB,EAAU6C,cAAe5C,GAC9C,kBAAC,EAAD,CAAUxG,GAAI,EAAGX,MAAOkH,GACtB,kBAAC,EAAD,CACEnG,OAAQA,EACRf,MAAOoH,EACPtD,SAAUuD,KAGd,kBAAC,EAAD,CAAU1G,GAAI,EAAGX,MAAOkH,GACtB,kBAAC,EAAD,CACEnG,OAAQA,EACRf,MAAOoH,EACPtD,SAAUuD,KAGd,kBAAC,EAAD,CAAU1G,GAAI,EAAGX,MAAOkH,GACtB,kBAAC,EAAD,CACEnG,OAAQA,EACRf,MAAOoH,EACPtD,SAAUuD,OAKlB,kBAAC8B,EAAA,EAAD,KACE,kBAACa,EAAA,EAAD,CAAYC,QAAS,kBAAM5C,EAAQ,MAAK,kBAAC3D,EAAA,EAAD,yBAI9C,kBAACxD,EAAA,EAAD,CAAKG,GAAI,GACP,kBAAC+H,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAYF,MAAM,+CAClB,kBAACG,EAAA,EAAD,KACE,kBAACpI,EAAA,EAAD,CAAKC,QAAQ,OAAO+J,SAAS,OAAO9J,UAAWH,EAAOP,MACnDsH,EAAY9B,KAAI,gBAAGZ,EAAH,EAAGA,MAAOxB,EAAV,EAAUA,OAAV,OACf,kBAACqH,EAAA,EAAD,CACE9F,QAAQ,WACRC,MAAOA,EACP2F,QAAS,kBAAM3C,EAAU,CAAExE,SAAQC,MAAO","file":"static/js/7.e275fc7a.chunk.js","sourcesContent":["import React, {\n  useState,\n  useRef,\n  useMemo,\n  useEffect,\n  useCallback\n} from \"react\";\nimport PageLayout from \"layout/PageLayout\";\nimport {\n  Grid,\n  TextField,\n  Input,\n  Typography,\n  Box,\n  Tabs,\n  Tab,\n  Paper,\n  useMediaQuery,\n  Checkbox,\n  FormControlLabel,\n  Button,\n  CardHeader,\n  CardContent,\n  CardActions,\n  IconButton,\n  Card,\n  Tooltip,\n  Chip\n} from \"@material-ui/core\";\nimport { makeStyles, useTheme } from \"@material-ui/core/styles\";\nimport { green, red, grey } from \"@material-ui/core/colors\";\nimport { useRegulex, useQuery } from \"hooks\";\nimport { debugErr } from \"utils\";\nimport SwipeableViews from \"react-swipeable-views\";\nimport { useLocation as useWindowLocation } from \"react-use\";\nimport { Share, Clear } from \"@material-ui/icons\";\nimport { useSnackbar } from \"notistack\";\nimport CopyToClipboard from \"react-copy-to-clipboard\";\n\ndeclare module \"@material-ui/core/styles/createMuiTheme\" {\n  interface Theme {\n    codeFontFamily: string;\n  }\n}\n\nconst useStyles = makeStyles(theme => ({\n  regexpContainer: {\n    width: \"100%\",\n    overflow: \"auto\",\n    textAlign: \"center\"\n  },\n  error: {\n    width: \"100%\",\n    color: \"red\",\n    overflow: \"auto\"\n  },\n  input: {\n    height: \"100%\",\n    fontFamily: theme.codeFontFamily\n  },\n  code: {\n    fontFamily: theme.codeFontFamily\n  },\n  tags: {\n    '& > *': {\n      marginRight: theme.spacing(1),\n      marginBottom: theme.spacing(1),\n    }\n  }\n}));\n\ntype RawRegExp = {\n  source: string;\n  flags: string;\n};\n\ntype PanelProps = {\n  regexp: RawRegExp;\n  value: string;\n  onChange: (newValue: string) => void;\n};\n\nconst NameValue: React.FC<{ name: string; value: React.ReactNode }> = ({\n  name,\n  value\n}) => {\n  const styles = useStyles();\n  return (\n    <Box display=\"flex\" className={styles.code} mt={1}>\n      <Box whiteSpace=\"nowrap\">{name}:&nbsp;</Box>\n      <Box style={{ wordBreak: \"break-all\" }}>{value}</Box>\n    </Box>\n  );\n};\n\nconst TabPanel: React.FC<{ id: number; value: number }> = ({\n  children,\n  id,\n  value,\n  ...props\n}) => {\n  return <Box {...props}>{id === value && <Box p={3}>{children}</Box>}</Box>;\n};\n\nconst RegExpVisualPanel: React.FC<{ regexp: RawRegExp }> = ({ regexp }) => {\n  const containerRef = useRef<HTMLDivElement>(null);\n  const styles = useStyles();\n  const { value: regulex } = useRegulex();\n  const [error, setError] = useState<Error>();\n  useEffect(() => {\n    if (!regulex || !containerRef.current) return;\n\n    // 清除生成的图片\n    containerRef.current.innerHTML = \"\";\n\n    const { parse, visualize, Raphael } = regulex;\n    var paper = Raphael(containerRef.current, 0, 0);\n    try {\n      // 重新生成图片\n      visualize(parse(regexp.source), regexp.flags, paper);\n      // 重置错误\n      setError(undefined);\n    } catch (err) {\n      let _err = err;\n      // 如果是语法错误，格式化错误\n      if (err instanceof parse.RegexSyntaxError) {\n        var msg = [\"Error:\" + err.message, \"\"];\n        if (typeof err.lastIndex === \"number\") {\n          msg.push(regexp.source);\n          msg.push(\"-\".repeat(err.lastIndex) + \"^\");\n        }\n        _err = new Error(msg.join(\"\\n\"));\n      }\n      setError(_err);\n      debugErr(_err);\n    }\n  }, [regexp, regulex]);\n  return (\n    <Box>\n      {error && (\n        <Typography className={styles.error} component=\"pre\">\n          <code>{error.message}</code>\n        </Typography>\n      )}\n      <div\n        ref={containerRef}\n        className={styles.regexpContainer}\n        style={{ height: error ? 0 : \"auto\" }}\n      />\n    </Box>\n  );\n};\n\nconst RegExpTestPanel: React.FC<PanelProps> = ({ regexp, value, onChange }) => {\n  const isEmpty = !value || !regexp.source;\n  const matched = useMemo(() => {\n    if (isEmpty) return false;\n\n    let jsRegExp;\n    try {\n      jsRegExp = new RegExp(regexp.source, regexp.flags);\n      return jsRegExp.test(value);\n    } catch (err) {\n      debugErr(err);\n      return false;\n    }\n  }, [regexp, value, isEmpty]);\n  return (\n    <>\n      <Box>\n        <TextField\n          variant=\"outlined\"\n          label=\"输入源文本\"\n          multiline\n          fullWidth\n          value={value}\n          onChange={e => onChange(e.target.value)}\n        />\n      </Box>\n      <Box mt={2} ml={1}>\n        {isEmpty ? (\n          <Box color={grey[500]}>--</Box>\n        ) : matched ? (\n          <Box color={green[500]}>匹配!</Box>\n        ) : (\n          <Box color={red[500]}>不匹配!</Box>\n        )}\n      </Box>\n    </>\n  );\n};\n\nconst RegExpMatchPanel: React.FC<PanelProps> = ({\n  regexp,\n  value,\n  onChange\n}) => {\n  const isEmpty = !value || !regexp.source;\n  const matches = useMemo(() => {\n    if (isEmpty) return null;\n\n    let jsRegExp;\n    try {\n      jsRegExp = new RegExp(regexp.source, regexp.flags);\n      return jsRegExp.exec(value);\n    } catch (err) {\n      debugErr(err);\n      return null;\n    }\n  }, [isEmpty, regexp, value]);\n  return (\n    <>\n      <Box>\n        <TextField\n          variant=\"outlined\"\n          label=\"输入源文本\"\n          multiline\n          fullWidth\n          value={value}\n          onChange={e => onChange(e.target.value)}\n        />\n      </Box>\n      <Box mt={2}>\n        {isEmpty && <Box color={grey[500]}>--</Box>}\n        {!isEmpty && matches === null && <Box color={red[500]}>不匹配!</Box>}\n        {!isEmpty && matches !== null && (\n          <Box>\n            <Box color={green[500]}>匹配!</Box>\n            <Box style={{ overflow: \"auto\" }}>\n              {matches.map((group, n) => (\n                <NameValue name={`分组 #${n}`} value={group} />\n              ))}\n            </Box>\n          </Box>\n        )}\n      </Box>\n    </>\n  );\n};\n\nconst RegExpReplacePanel: React.FC<PanelProps> = ({\n  regexp,\n  value,\n  onChange\n}) => {\n  const [subText, setSubText] = useState(\"\");\n  const [newSubText, matches] = useMemo(() => {\n    // if (isEmpty) return null;\n\n    let jsRegExp;\n    try {\n      jsRegExp = new RegExp(regexp.source, regexp.flags);\n    } catch (err) {\n      debugErr(err);\n      return [\"\", null];\n    }\n    const newSubText = value.replace(jsRegExp, subText);\n    const matches = jsRegExp.exec(value);\n    console.log(\"matches:\", matches);\n    return [newSubText, matches];\n  }, [regexp.flags, regexp.source, subText, value]);\n  return (\n    <>\n      <Box>\n        <TextField\n          variant=\"outlined\"\n          label=\"输入源文本\"\n          multiline\n          fullWidth\n          value={value}\n          onChange={e => onChange(e.target.value)}\n        />\n      </Box>\n      {matches !== null && (\n        <Box mt={2}>\n          <NameValue name=\"$$\" value=\"$\" />\n          <NameValue name=\"$&\" value={matches[0]} />\n          <NameValue\n            name=\"$`\"\n            value={matches.input.substring(0, matches.index)}\n          />\n          <NameValue\n            name=\"$'\"\n            value={matches.input.substring(matches.index + matches[0].length)}\n          />\n          {matches.map((group, n) =>\n            n >= 1 ? <NameValue name={\"$\" + n} value={group} /> : null\n          )}\n        </Box>\n      )}\n      <Box mt={2}>\n        <TextField\n          variant=\"outlined\"\n          label=\"输入替换文本\"\n          multiline\n          fullWidth\n          value={subText}\n          onChange={e => setSubText(e.target.value)}\n        />\n      </Box>\n      <Box mt={2}>\n        <Box>{newSubText}</Box>\n      </Box>\n    </>\n  );\n};\n\nconst flagItems = [\n  {\n    flag: \"g\",\n    label: \"全局匹配\"\n  },\n  {\n    flag: \"i\",\n    label: \"忽略大小写\"\n  },\n  {\n    flag: \"m\",\n    label: \"多行匹配\"\n  }\n] as const;\n\nconst useRegExp = () => {\n  const [query, setQuery] = useQuery();\n  const source = query.source || \"\";\n  const flags = query.flags || \"\";\n  const regexp: RawRegExp = { source, flags };\n  const setRegExp = useCallback(\n    (regexp: RawRegExp) => {\n      setQuery(regexp);\n    },\n    [setQuery]\n  );\n  return [regexp, setRegExp] as const;\n};\n\n\nconst RegExpPage: React.FC = () => {\n  const styles = useStyles();\n  const [tabIndex, setTabIndex] = useState(0);\n  const [text, setText] = useState(\"\");\n  const [regexp, setRegexp] = useRegExp();\n  const theme = useTheme();\n  const matches = useMediaQuery(theme.breakpoints.down(\"sm\"));\n  const { enqueueSnackbar } = useSnackbar();\n  const { href } = useWindowLocation();\n\n  // 单个标志位变化\n  const onFlagChange = (flag: \"g\" | \"i\" | \"m\", checked: boolean) => {\n    let newFlags = regexp.flags.replace(new RegExp(flag, \"g\"), \"\");\n    newFlags += checked ? flag : \"\";\n    setRegexp({ ...regexp, flags: newFlags });\n  };\n\n  // 一组标志位变化\n  const onFlagsChange: React.ChangeEventHandler<HTMLInputElement> = e => {\n    let newFlags = e.target.value;\n    // 去除无效标志位\n    newFlags = newFlags.replace(/[^gim]/, \"\");\n    // 去重\n    \"gim\".split(\"\").forEach(flag => {\n      if (newFlags.includes(flag)) {\n        newFlags = newFlags.replace(new RegExp(flag, \"g\"), \"\") + flag;\n      }\n    });\n    setRegexp({ ...regexp, flags: newFlags });\n  };\n\n  const separator = (\n    <Box pt=\"6px\" pb=\"7px\" color=\"primary.main\">\n      /\n    </Box>\n  );\n  return (\n    <PageLayout title=\"正则表达式\">\n      <Card>\n        <CardHeader title=\"正则表达式\"></CardHeader>\n        <CardContent>\n          <Grid container>\n            <Grid item xs={9} sm={10}>\n              <Input\n                className={styles.code}\n                startAdornment={separator}\n                placeholder=\"pattern\"\n                fullWidth\n                value={regexp.source}\n                onChange={e => setRegexp({ ...regexp, source: e.target.value })}\n              />\n            </Grid>\n            <Grid item xs sm>\n              <Input\n                className={styles.code}\n                startAdornment={separator}\n                placeholder=\"flags\"\n                fullWidth\n                value={regexp.flags}\n                onChange={onFlagsChange}\n              />\n            </Grid>\n          </Grid>\n        </CardContent>\n        <CardActions>\n          <Grid container>\n            {flagItems.map(item => (\n              <Grid item>\n                <FormControlLabel\n                  control={\n                    <Checkbox\n                      checked={regexp.flags.includes(item.flag)}\n                      onChange={(_, checked) =>\n                        onFlagChange(item.flag, checked)\n                      }\n                      color=\"primary\"\n                    />\n                  }\n                  label={item.label}\n                />\n              </Grid>\n            ))}\n          </Grid>\n        </CardActions>\n      </Card>\n      <Box mt={2}>\n        <Card>\n          <CardHeader title=\"可视化\"></CardHeader>\n          <CardContent>\n            <RegExpVisualPanel regexp={regexp} />\n          </CardContent>\n          {/* <CardActions>\n            <Tooltip title=\"分享\" arrow placement=\"top\">\n              <CopyToClipboard\n                text={href || \"\"}\n                onCopy={() =>\n                  enqueueSnackbar(\n                    <span>\n                      <a\n                        href={href}\n                        target=\"_blank\"\n                        rel=\"noopener noreferrer\"\n                        style={{ color: \"white\" }}\n                      >\n                        {href}\n                      </a>{\" \"}\n                      已复制，快去分享吧！\n                    </span>\n                  )\n                }\n              >\n                <IconButton>\n                  <Share />\n                </IconButton>\n              </CopyToClipboard>\n            </Tooltip>\n          </CardActions> */}\n        </Card>\n      </Box>\n\n      <Box my={2}>\n        <Card>\n          <CardContent>\n            <Tabs\n              value={tabIndex}\n              onChange={(_, value) => setTabIndex(value as number)}\n              textColor=\"primary\"\n              indicatorColor=\"primary\"\n              variant={matches ? \"fullWidth\" : \"standard\"}\n            >\n              <Tab label=\"测试\"></Tab>\n              <Tab label=\"匹配\"></Tab>\n              <Tab label=\"替换\"></Tab>\n            </Tabs>\n            <SwipeableViews index={tabIndex} onChangeIndex={setTabIndex}>\n              <TabPanel id={0} value={tabIndex}>\n                <RegExpTestPanel\n                  regexp={regexp}\n                  value={text}\n                  onChange={setText}\n                />\n              </TabPanel>\n              <TabPanel id={1} value={tabIndex}>\n                <RegExpMatchPanel\n                  regexp={regexp}\n                  value={text}\n                  onChange={setText}\n                />\n              </TabPanel>\n              <TabPanel id={2} value={tabIndex}>\n                <RegExpReplacePanel\n                  regexp={regexp}\n                  value={text}\n                  onChange={setText}\n                />\n              </TabPanel>\n            </SwipeableViews>\n          </CardContent>\n          <CardActions>\n            <IconButton onClick={() => setText('')}><Typography>清除</Typography></IconButton>\n          </CardActions>\n        </Card>\n      </Box>\n      <Box mt={2}>\n        <Card>\n          <CardHeader title=\"常用正则表达式\"></CardHeader>\n          <CardContent>\n            <Box display=\"flex\" flexWrap='wrap' className={styles.tags}>\n              {mostRegExps.map(({ label, source }) => (\n                <Chip\n                  variant=\"outlined\"\n                  label={label}\n                  onClick={() => setRegexp({ source, flags: '' })}\n                />\n              ))}\n            </Box>\n          </CardContent>\n        </Card>\n      </Box>\n    </PageLayout>\n  );\n};\n\nconst mostRegExps = [\n  {\n    label: \"身份证号\",\n    source: /^\\d{17}[0-9Xx]|\\d{15}$/.source,\n  },\n  {\n    label: 'Email地址',\n    source: /^\\w[-\\w.+]*@([A-Za-z0-9][-A-Za-z0-9]+\\.)+[A-Za-z]{2,14}$/.source\n  },\n  {\n    label: '中文字符',\n    source: /^[\\u4e00-\\u9fa5]+$/.source\n  },\n  {\n    label: '双字节字符(含汉字)',\n    // eslint-disable-next-line no-control-regex\n    source: /^[^\\x00-\\xff]+$/.source\n  },\n  {\n    label: '时间(时:分:秒)',\n    source: /^([01]?\\d|2[0-3]):[0-5]?\\d:[0-5]?\\d$/.source\n  },\n  {\n    label: '日期(年:月:日)',\n    source: /^(([0-9]{3}[1-9]|[0-9]{2}[1-9][0-9]{1}|[0-9]{1}[1-9][0-9]{2}|[1-9][0-9]{3})-(((0[13578]|1[02])-(0[1-9]|[12][0-9]|3[01]))|((0[469]|11)-(0[1-9]|[12][0-9]|30))|(02-(0[1-9]|[1][0-9]|2[0-8]))))|((([0-9]{2})(0[48]|[2468][048]|[13579][26])|((0[48]|[2468][048]|[3579][26])00))-02-29)$/.source\n  },\n  {\n    label: 'IPv4地址',\n    source: /^\\d{0,3}\\.\\d{0,3}\\.\\d{0,3}\\.\\d{0,3}$/.source\n  },\n  {\n    label: '手机号',\n    source: /^(13\\d|14[579]|15[^4\\D]|17[^49\\D]|18\\d)\\d{8}$/.source\n  }\n];\n\nexport default RegExpPage;\n","import { useAsync } from \"react-use\";\n\nexport default function useRegulex() {\n  return useAsync(async () => {\n    return new Promise<any>((resolve, reject) => {\n      const script = document.createElement(\"script\");\n      script.src = process.env.PUBLIC_URL + \"/regulex.js\";\n      script.onload = () => {\n        const regulex = window.require(\"regulex\");\n        resolve(regulex);\n      };\n      script.onerror = () => {\n        reject(new Error(\"load regulex error!\"));\n      };\n      document.body.appendChild(script);\n    });\n  });\n}\n","import { useLocation, useHistory } from \"react-router-dom\";\nimport { useCallback } from \"react\";\n\n/**\n * 获取 URL 查询参数\n * 例如 regexp?source=abc&flags=g 返回查询参数 {source: \"abc\", flags: \"g\"}\n */\nexport const useQuery = () => {\n  const {pathname, search} = useLocation();\n  const history = useHistory();\n  const searchParams = new URLSearchParams(search);\n  const query: Record<string, string> = {}\n  for(let [key, value] of searchParams) {\n    query[key] = value\n  }\n  const setQuery = useCallback(\n    (query: Record<string, string>) => {\n      const search = new URLSearchParams(query).toString();\n      history.replace({ pathname, search });\n    },\n    [history, pathname]\n  );\n\n  return [query, setQuery] as const;\n};"],"sourceRoot":""}